#==================
#4. Custom function
#==================
custom.func <- function(){
return()
}
#==============
#5. ODEs System
#==============
ode.func <- function(time, inits, params, custom.func){
with(as.list(c(inits,params)),{
Crest = Arest/Vrest #concentration in rest of body (mg/L)
CVrest = Crest/Prest	#concentration in venous blood leaving the rest of the body (mg/L)
Ckidney_blood = Akidney_blood/Vkidneyb	#concentration in kidney blodd (mg/L)
CVkidney = Ckidney_blood #/Pkidney	#concentration in venous blood leaving kidney (mg/L)
CPTC = APTC/VPTC	#concentration in PTC (mg/L)
Cfil = Afil/Vfil	#concentration in filtrate (mg/L)
Cliver = Aliver/Vliver	#concentration in the liver (mg/L)
CVliver = Cliver/Pliver	#concentration in the venous blood leaving the liver (mg/L)
Cgonads = Agonads/Vgonads	#concentration in the gonads (mg/L)
CVgonads = Cgonads/Pgonads	#concentration in the venous blood leaving the gonads (mg/L)
Cspleen = Aspleen/Vspleen	#concentration in the spleen (mg/L)
CVspleen = Cspleen/Pspleen	#concentration in the venous blood leaving the spleen (mg/L)
Cheart = Aheart/Vheart	#concentration in the heart (mg/L)
CVheart = Cheart/Pheart	#concentration in the venous blood leaving the heart (mg/L)
Clung = Alung/Vlung	#concentration in the lung (mg/L)
CVlung = Clung/Plung	#concentration in the venous blood leaving the lung (mg/L)
Cbrain = Abrain/Vbrain	#concentration in the brain (mg/L)
CVbrain = Cbrain/Pbrain	#concentration in the venous blood leaving the brain (mg/L)
Cintestine = Aintestine/Vintestine	#concentration in the liver (mg/L)
CVintestine = Cintestine/Pintestine	#concentration in the venous blood leaving the liver (mg/L)
Cstomach = Astomach/Vstomach	#concentration in the liver (mg/L)
CVstomach = Cstomach/Pstomach	#concentration in the venous blood leaving the liver (mg/L)
Cart_free = Aart_free/Vart_plasma		#concentration in arterial  plasma (mg)
Cart = Cart_free/Free	#concentration of total PFOA in arterial plasma (mg/L)
Cven_free = Aven_free/Vven_plasma		#concentration in venous plasma (mg)
Cven = Cven_free/Free	#concentration of total PFOA in venous plasma (mg/L)
# Rest of Body (Tis)
dArest = Qrest*(Cart-CVrest)*Free	#rate of change in rest of body (mg/h)
dAgonads = Qgonads*(Cart-CVgonads)*Free	#rate of change in rest of body (mg/h)
dAspleen = Qspleen*(Cart-CVspleen)*Free	#rate of change in rest of body (mg/h)
dAheart = Qheart*(Cart-CVheart)*Free	#rate of change in rest of body (mg/h)
dAlung = Qlung*(Cven-CVlung)*Free	#rate of change in rest of body (mg/h)
dAbrain = Qbrain*(Cart-CVbrain)*Free	#rate of change in rest of body (mg/h)
#Kidney
#Kidney Blood (Kb)
dAdif <- kdif*(Ckidney_blood - CPTC)	#rate of diffusion from into the PTC (mg/hr)
dA_baso <- (Vmax_baso*Ckidney_blood)/(Km_baso + Ckidney_blood)
dAkidney_blood <- Qkidney*(Cart-CVkidney)*Free - Cart*GFR*Free- dAdif - dA_baso  #rate of change in kidney blood (mg/h).
dACl <- Cven*GFR*Free	#rate of clearance via glormerular filtration (mg/h)
#Proximal Tubule Cells (PTC)
dAefflux <- kefflux*APTC
dA_apical <- (Vmax_apical*Cfil)/(Km_apical + Cfil)
dAPTC <-  dAdif + dA_apical + dA_baso - dAefflux #rate of change in PTC(mg/h)
#Filtrate (Fil)
dAfil = Cart*GFR*Free - dA_apical - Afil*kurine	#rate of change in filtrate (mg/h)
#Urinary elimination
dAurine = kurine*Afil	#rate of change in urine (mg/h)
#GI Tract (Absorption site of oral dose)
#Stomach
dAstomach_lumen=  - k0*Astomach_lumen - GE*Astomach_lumen 	#rate of change in the stomach lumen (mg/h)
dAstomach = k0*Astomach_lumen + Qstomach*(Cart-CVstomach)*Free	#rate change in the stomach (mg/h)
#Small Intestine
dAintestine_lumen = GE*Astomach_lumen - kabs*Aintestine_lumen - kunabs*Aintestine_lumen	#rate of change in the  intestine lumen (mg/hr)
dAintestine = kabs*Aintestine_lumen +  Qintestine*(Cart-CVintestine)*Free	#rate change in the  intestine (mg/hr)
#Feces compartment
dAfeces = kbile*Aliver + kunabs*Aintestine_lumen #rate of change in the feces compartment (mg/h)
#Liver
dAliver = QL_hepatic_artery*Cart*Free - kbile*Aliver + kabs*Aintestine_lumen + k0*Astomach_lumen +
Qspleen*CVspleen*Free +Qstomach*CVstomach*Free+ Qintestine*CVintestine*Free-
(QL_hepatic_artery+Qspleen+Qstomach+Qintestine)*CVliver*Free#rate of change in the liver (mg/h)
dAbile = kbile*Aliver
#Venous Plasma compartment
dAven_free = Qrest*CVrest*Free + Qgonads*CVgonads*Free +  Qheart*CVheart*Free + Qbrain*CVbrain*Free +
(Qkidney*CVkidney*Free) + ((QL_hepatic_artery+Qspleen+Qstomach+Qintestine) *CVliver*Free) -
(Qlung*Cven*Free)+ dAefflux #rate of change in the plasma (mg/h)
#Arterial Plasma compartment
dAart_free =  Qlung*CVlung*Free - Cart*Free*(Qrest+Qgonads+Qspleen+Qheart+
Qbrain+Qkidney+Qstomach+Qintestine+QL_hepatic_artery)
#Mass Balance Check
Atissue = Aart_free +Aven_free+ Arest + Akidney_blood + Afil + APTC + Aliver +
Astomach + Astomach_lumen + Aintestine+ Aintestine_lumen+
Agonads + Aspleen + Aheart + Alung + Abrain #sum of mass in all compartments (mg)
Aloss = Aurine + Afeces #sum of mass lost through urinary and fecal excretion (mg)
Atotal = Atissue + Aloss 	#total mass; should equal total dose
list(c("dArest" = dArest, "dAgonads" = dAgonads, "dAspleen" = dAspleen, "dAheart" = dAheart,
"dAlung" = dAlung, "dAbrain" = dAbrain,
"dAdif" = dAdif, "dA_baso" = dA_baso, "dAkidney_blood" = dAkidney_blood,
"dACl" = dACl, "dAefflux" = dAefflux,
"dA_apical" = dA_apical, "dAPTC" = dAPTC, "dAfil" = dAfil,
"dAurine" = dAurine, "dAstomach_lumen" =dAstomach_lumen,
"dAstomach" = dAstomach, "dAintestine_lumen" = dAintestine_lumen,
"dAintestine" = dAintestine, "dAfeces" = dAfeces,
"dAliver" = dAliver, "dAbile" = dAbile, "dAven_free" = dAven_free,
"dAart_free" = dAart_free),
"Atissue" = Atissue, "Aloss" = Aloss, "Atotal" = Atotal, "Crest" =Crest,
"CVrest" = CVrest,
"CVkidney" = CVkidney, "CPTC" = CPTC,
"Cfil" = Cfil,  "CVliver" = CVliver, "Cart_free" = Cart_free,
"Cart" = Cart,
"Cplasma" = Aven_free/VPlas/Free,
"Cliver" = Aliver /Vliver,
"Ckidneys" = APTC/Vkidney,
"Cbrain" = Abrain /Vbrain)
})
}
#======================
#3. Objective function
#======================
obj.func <- function(fitted_pars, group, serum_male, serum_indices_male,
tissue_male,tissue_indices_male, serum_female, serum_indices_female,
tissue_female,tissue_indices_female, inits, N_pars){
#Subroutine for returning the goodness-of-fit on the serum data, male or female
solve_odes <- function(serum, admin.type, admin.dose, indices,
BW, sex, fitted_pars, group, N_pars ){
# Calculate PBK parameters
parameters <- create.params( list("BW" = BW  , sex = sex,
"admin.type" = admin.type,
"admin.time" = 0.01, "admin.dose" = admin.dose,
"fitted_pars" = fitted_pars, "group" = group,
"N_pars" = N_pars))
events <- create.events(parameters)
# Structure the in silico time vector in a way that the sampling time points are included
if(sex == "F"){
sample_time <- c(0,1e-10,1e-9,1e-8,1e-7,1e-6,1e-5, 1e-4, 1e-3,
seq(0.01,0.08, 0.001), 0.083, 0.1, 0.2, 0.25,
seq(0.3,  0.9, 0.1), seq(1,23,1),
seq(24,196 , 4))
}else if(sex == "M"){
sample_time <- c(0,1e-10,1e-9,1e-8,1e-7,1e-6,1e-5, 1e-4, 1e-3,
seq(0.01,0.08, 0.001), 0.083, 0.1, 0.2, 0.25,
seq(0.3,  0.9, 0.1), seq(1,23,1),
seq(24, 192, 4), seq(196, 516,16), 528, seq(540, 860,16),
864, seq(880, 1200,32))
}else(
stop(" Provide a valid sex. Chose between 'F' or 'M'")
)
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = parameters, events = events,
method="lsodes",rtol = 1e-4, atol = 1e-4))
concentrations <- data.frame("time" = solution$time, "Cplasma" = solution$Cplasma)
experimental_time_points <- serum$Time[indices[1]:indices[2]]
concentrations <- concentrations[concentrations$time %in% experimental_time_points, "Cplasma"]
observed <- list("Cplasma" = serum$Mass[indices[1]:indices[2]])
predicted <- list("Cplasma" = concentrations)
#Calculate goodness-of-fit
discrepancy <- SODI(observed, predicted)
return(list("discrepancy" = discrepancy,"solution" = solution))
}
# Weight from https://animal.ncku.edu.tw/p/412-1130-16363.php?Lang=en based on SD rats 8 weeks old
BW_male <- 0.3#kg
BW_female <- 0.2#kg
#######################
# Goodness-of-fit on male serum
# IV, 6mg/kg
discrepancy_iv_6 <- solve_odes(serum = serum_male, admin.type = unique(serum_male$Type)[1],
admin.dose = BW_male*unique(serum_male$Dose)[1],
indices = c(1,serum_indices_male[1]-1),
BW = BW_male, sex = "M", fitted_pars = fitted_pars,
group = group, N_pars = N_pars)$discrepancy
# Oral, 6mg/kg
discrepancy_oral_6 <- solve_odes(serum = serum_male,admin.type = unique(serum_male$Type)[2],
admin.dose = BW_male*unique(serum_male$Dose)[1],
indices = c(serum_indices_male[1],serum_indices_male[2]-1),
BW = BW_male, sex = "M", fitted_pars = fitted_pars,
group = group, N_pars = N_pars)$discrepancy
# Oral, 12mg/kg
solution_oral_12 <- solve_odes(serum = serum_male,admin.type = unique(serum_male$Type)[2],
admin.dose = BW_male*unique(serum_male$Dose)[2],
indices = c(serum_indices_male[2],serum_indices_male[3]-1),
BW = BW_male, sex = "M", fitted_pars = fitted_pars,
group = group, N_pars = N_pars)
discrepancy_oral_12 <- solution_oral_12$discrepancy
# Oral, 48mg/kg
discrepancy_oral_48 <- solve_odes(serum = serum_male,admin.type = unique(serum_male$Type)[2],
admin.dose = BW_male*unique(serum_male$Dose)[3],
indices = c(serum_indices_male[3],dim(serum_male)[1]),
BW = BW_male, sex = "M", fitted_pars = fitted_pars,
group = group, N_pars = N_pars)$discrepancy
# #######################
# # Goodness-of-fit on female serum
# # IV, 40mg/kg
# discrepancy_iv_40 <- solve_odes(serum = serum_female, admin.type = unique(serum_female$Type)[1],
#                                admin.dose = BW_female*unique(serum_female$Dose)[1],
#                                indices = c(1,serum_indices_female[1]-1),
#                                BW = BW_female, sex = "F", fitted_pars = fitted_pars,
#                                group = group, N_pars = N_pars)$discrepancy
# # Oral, 40mg/kg
# discrepancy_oral_40 <- solve_odes(serum = serum_female, admin.type = unique(serum_female$Type)[2],
#                                  admin.dose = BW_female*unique(serum_female$Dose)[1],
#                                  indices = c(serum_indices_female[1],serum_indices_female[2]-1),
#                                  BW = BW_female, sex = "F", fitted_pars = fitted_pars,
#                                  group = group, N_pars = N_pars)$discrepancy
# # Oral, 80mg/kg
# solution_oral_80 <- solve_odes(serum = serum_female, admin.type = unique(serum_female$Type)[2],
#                                admin.dose = BW_female*unique(serum_female$Dose)[2],
#                                indices = c(serum_indices_female[2],serum_indices_female[3]-1),
#                                BW = BW_female, sex = "F", fitted_pars = fitted_pars,
#                                group = group, N_pars = N_pars)
# discrepancy_oral_80 <- solution_oral_80$discrepancy
#
#
# # Oral, 320mg/kg
# discrepancy_oral_320 <- solve_odes(serum = serum_female, admin.type = unique(serum_female$Type)[2],
#                                   admin.dose = BW_female*unique(serum_female$Dose)[3],
#                                   indices = c(serum_indices_female[3],dim(serum_female)[1]),
#                                   BW = BW_female, sex = "F", fitted_pars = fitted_pars,
#                                   group = group, N_pars = N_pars)$discrepancy
#
#######################
# Estimate the goodness-of-fit on the male tissues
concentrations <- data.frame("time" = solution_oral_12$solution$time,
"Ckidneys" = solution_oral_12$solution$Ckidneys,
"Cliver" =solution_oral_12$solution$Cliver,
"Cbrain" = solution_oral_12$solution$Cbrain)
experimental_time_points_liver <- tissue_male$Time[1:(tissue_indices_male[1]-1)]
concentration_liver <- concentrations[concentrations$time %in% experimental_time_points_liver, "Cliver"]
experimental_time_points_kidneys <- tissue_male$Time[tissue_indices_male[1]:(tissue_indices_male[2]-1)]
concentration_kidneys <- concentrations[concentrations$time %in% experimental_time_points_kidneys, "Ckidneys"]
experimental_time_points_brain<- tissue_male$Time[tissue_indices_male[2]:dim(tissue_male)[1]]
concentration_brain <- concentrations[concentrations$time %in% experimental_time_points_brain, "Cbrain"]
observed <- list("Cliver" = tissue_male[tissue_male$Tissue == "Liver","Mass"],
"Ckidneys" = tissue_male[tissue_male$Tissue == "Kidneys","Mass"],
"Cbrain" = tissue_male[tissue_male$Tissue == "Brain","Mass"])
predicted <- list("Cliver" = concentration_liver, "Ckidneys" = concentration_kidneys,
"Cbrain" = concentration_brain)
#Calculate goodness-of-fit
discrepancy_tissues_male <- SODI(observed, predicted)
#######################
# # Estimate the goodness-of-fit on the female tissues
# concentrations <- data.frame("time" = solution_oral_12$solution$time,
#                              "Ckidneys" = solution_oral_12$solution$Ckidneys,
#                              "Cliver" =solution_oral_12$solution$Cliver,
#                              "Cbrain" = solution_oral_12$solution$Cbrain)
#
# experimental_time_points_liver <- tissue_female$Time[1:(tissue_indices_female[1]-1)]
# concentration_liver <- concentrations[concentrations$time %in% experimental_time_points_liver, "Cliver"]
#
# experimental_time_points_kidneys <- tissue_female$Time[tissue_indices_female[1]:(tissue_indices_female[2]-1)]
# concentration_kidneys <- concentrations[concentrations$time %in% experimental_time_points_kidneys, "Ckidneys"]
#
# experimental_time_points_brain<- tissue_female$Time[tissue_indices_female[2]:dim(tissue_female)[1]]
# concentration_brain <- concentrations[concentrations$time %in% experimental_time_points_brain, "Cbrain"]
#
# observed <- list("Cliver" = tissue_female[tissue_female$Tissue == "Liver","Mass"],
#                  "Ckidneys" = tissue_female[tissue_female$Tissue == "Kidneys","Mass"],
#                  "Ckidneys" = tissue_female[tissue_female$Tissue == "Brain","Mass"])
#
# predicted <- list("Cliver" = concentration_liver, "Ckidneys" = concentration_kidneys,
#                   "Cbrain" = concentration_brain)
# #Calculate goodness-of-fit
# discrepancy_tissues_female <- SODI(observed, predicted)
#
# Calculate total discrepancy
total_discrepancy <- discrepancy_iv_6 + discrepancy_oral_6 + discrepancy_oral_12 +
discrepancy_oral_48+ discrepancy_tissues_male
#  discrepancy_iv_40 +discrepancy_oral_40 +
# discrepancy_oral_80 + discrepancy_oral_320+
#   + discrepancy_tissues_female
return(total_discrepancy)
}
# SODI function the returns the SODI index described in Tsiros et al.2024
# predictions: list of vectors containing the predicted data
# names of the compartments
SODI <- function(observed, predicted, comp.names =NULL){
# Check if the user provided the correct input format
if (!is.list(observed) || !is.list(predicted)){
stop(" The observations and predictions must be lists")
}
# Check if the user provided equal length lists
if (length(observed) != length(predicted)){
stop(" The observations and predictions must have the same compartments")
}
Ncomp <- length(observed) # Number of compartments
I <- rep(NA, Ncomp) # Compartment discrepancy index
N_obs <- rep(NA, Ncomp) #Number of observations per compartment
#loop over the compartments
for (i in 1:Ncomp){
Et <- 0 #relative error with observations
St <- 0  #relative error with simulations
N <- length(observed[[i]]) # number of observations for compartment i
# Check if observations and predictions have equal length
if(N != length(predicted[[i]])){
stop(paste0("Compartment ",i," had different length in the observations and predictions"))
}
N_obs[i] <- N # populate the N_obs vector
for (j in 1:N){
# sum of relative squared errors (error = observed - predicted)
Et <- Et + ( abs(observed[[i]][j] - predicted[[i]][j])  / observed[[i]][j] )  ^2
St <- St + ( abs(observed[[i]][j] - predicted[[i]][j])  / predicted[[i]][j] )  ^2
}
# root mean of the square of observed values
RMEt <- sqrt(Et/N)
# root mean of the square of simulated values
RMSt <- sqrt( St/N)
I[i] <- (RMEt + RMSt)/2
}
# Total number of observations
Ntot <- sum(N_obs)
# Initialise the consolidated discrepancy index
Ic <-0
for (i in 1:Ncomp){
# Give weight to compartments with more observations (more information)
Ic <- Ic +  I[i]* N_obs[i]/Ntot
}
# Name the list of compartment discrepancy indices
if ( !is.null(comp.names)){
names(I) <- comp.names
}else if (!is.null(names(observed))){
names(I) <- names(observed)
} else if (!is.null(names(predicted)) && is.null(comp.names) ){
names(I) <- names(predicted)
}
return(Ic)
#return(list(Total_index = Ic, Compartment_index= I))
}
#==============================
#5. Decode chromosomes
#==============================
# Function for decoding the GA output. Simply, we take the floor of the continuous number
decode_ga_real <- function(real_num){
CF <- rep(NA, length(real_num))
# Grouping of correctin factors
for (i in 1:length(CF)){
CF[i] <-  floor(real_num[i])
}
return(CF)
}
#===============
# Load data
#===============
setwd("C:/Users/user/Documents/GitHub/PBK_Grouping/PFOA")
load("PFOA.Rdata")
MW = 414.07	#PFOA molecular mass (g/mol)
BW_male <- 0.3
BW_female <- 0.2
# Load raw data from paper Kreyling et al.2017, which are given in %ID/g tissue
df_serum_male <- openxlsx::read.xlsx("serum_male.xlsx",  colNames = T, rowNames = F)
df_tissue_male <- openxlsx::read.xlsx("tissue_male.xlsx", colNames = T, rowNames = F)
df_serum_female <- openxlsx::read.xlsx("serum_female.xlsx",  colNames = T, rowNames = F)
df_tissue_female <- openxlsx::read.xlsx("tissue_female.xlsx", colNames = T, rowNames = F)
#Rename columns for easier handling
colnames(df_serum_male) <- c("Time", "Mass", "Dose", "Type")
colnames(df_tissue_male) <- c("Time", "Mass", "Dose", "Tissue")
colnames(df_serum_female) <- c("Time", "Mass", "Dose", "Type")
colnames(df_tissue_female) <- c("Time", "Mass", "Dose", "Tissue")
#Transform microMolar to mg/L
df_serum_male$Mass <- df_serum_male$Mass*MW/1000
df_tissue_male$Mass <- df_tissue_male$Mass*MW/1000
df_serum_female$Mass <- df_serum_female$Mass*MW/1000
df_tissue_female$Mass <- df_tissue_female$Mass*MW/1000
#Decode the chromosome of the genetic algorithm
group <- decode_ga_real(GA_results@solution[1,])
#Initialise optimiser to NULL for better error handling later
optimizer <- NULL
opts <- list( "algorithm" = "NLOPT_LN_NEWUOA",
"xtol_rel" = 1e-09,
"ftol_rel" = 0.0,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = 1000,
"print_level" = 1)
# Create initial conditions (zero initialisation)
inits <- create.inits(list(NULL))
N_pars <- 4 # Number of parameters to be fitted
fit <- log(rep(1,N_pars))
try(
# Run the optimization algorithmm to estimate the parameter values
optimizer <- nloptr::nloptr( x0= fit,
eval_f = obj.func,
lb	= rep(log(1e-4), N_pars),
ub = rep(log(1000), N_pars),
opts = opts,
group = group,
serum_male = df_serum_male,
serum_indices_male = c(13,23,33),# index where dose changes
tissue_male = df_tissue_male,
tissue_indices_male = c(8,14),# index where tissue changes
serum_female = df_serum_female,
serum_indices_female = c(10,19,29),
tissue_female = df_tissue_female,
tissue_indices_female = c(6,11),
inits = inits,
N_pars = N_pars),
silent = TRUE
)
# fitted parameter values
fitted_pars = optimizer$solution
#Function for solving the ODEs given the solution of the GA and the optimisation problem
solve_odes <- function(admin.type, admin.dose, BW, sex, fitted_pars, group,N_pars ){
# Calculate PBK parameters
parameters <- create.params( list("BW" = BW  , sex = sex,
"admin.type" = admin.type,
"admin.time" = 0.01, "admin.dose" = admin.dose,
"fitted_pars" = fitted_pars, "group" = group,
"N_pars" = N_pars ))
events <- create.events(parameters)
# Structure the in silico time vector in a way that the sampling time points are included
if(sex == "F"){
sample_time <- c(0,1e-10,1e-9,1e-8,1e-7,1e-6,1e-5, 1e-4, 1e-3,
seq(0.01,0.08, 0.001), 0.083, 0.1, 0.2, 0.25,
seq(0.3,  0.9, 0.1), seq(1,23,1),
seq(24,196 , 4))
}else if(sex == "M"){
sample_time <- c(0,1e-10,1e-9,1e-8,1e-7,1e-6,1e-5, 1e-4, 1e-3,
seq(0.01,0.08, 0.001), 0.083, 0.1, 0.2, 0.25,
seq(0.3,  0.9, 0.1), seq(1,23,1),
seq(24, 192, 4), seq(196, 516,16), 528, seq(540, 860,16),
864, seq(880, 1200,32))
}else(
stop(" Provide a valid sex. Chose between 'F' or 'M'")
)
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = parameters, events = events,
method="lsodes",rtol = 1e-7, atol = 1e-7))
return(solution)
}
BW <- BW_male
#Acquire solutions for the different exposure scenarios
solution_iv_6_male <- solve_odes(admin.type = unique(df_serum_male$Type)[1],
admin.dose = BW*unique(df_serum_male$Dose)[1],
BW = BW, sex = "M", fitted_pars = fitted_pars,
group = group, "N_pars" = N_pars)
solution_oral_6_male <- solve_odes(admin.type = unique(df_serum_male$Type)[2],
admin.dose = BW*unique(df_serum_male$Dose)[1],
BW = BW, sex = "M", fitted_pars = fitted_pars,
group = group, "N_pars" = N_pars)
solution_oral_12_male <- solve_odes(admin.type = unique(df_serum_male$Type)[2],
admin.dose = BW*unique(df_serum_male$Dose)[2],
BW = BW, sex = "M", fitted_pars = fitted_pars,
group = group, "N_pars" = N_pars)
solution_oral_48_male <- solve_odes(admin.type = unique(df_serum_male$Type)[2],
admin.dose = BW*unique(df_serum_male$Dose)[3],
BW = BW, sex = "M", fitted_pars = fitted_pars,
group = group, "N_pars" = N_pars)
serum_predictions <- data.frame(Time = rep(solution_iv_6_male$time,4), value = c(solution_iv_6_male$Cplasma,
solution_oral_6_male$Cplasma, solution_oral_12_male$Cplasma,
solution_oral_48_male$Cplasma), dose = c(rep("dose1-iv", dim(solution_iv_6_male)[1]),
rep("dose1-oral", dim(solution_iv_6_male)[1]),
rep("dose2-oral", dim(solution_iv_6_male)[1]),
rep("dose3-oral", dim(solution_iv_6_male)[1])))
serum_predictions <- serum_predictions[serum_predictions$value != 0 ,]
df_serum_male$dose_to_plot <- rep(NA, dim(df_serum_male)[1])
for (i in 1:dim(df_serum_male)[1]){
if (df_serum_male[i,"Type"] == "iv"){
df_serum_male[i,"dose_to_plot"] <- "dose1-iv"
}else if(df_serum_male[i,"Dose"] == 6){
df_serum_male[i,"dose_to_plot"] <- "dose1-oral"
}else if(df_serum_male[i,"Dose"] == 12){
df_serum_male[i,"dose_to_plot"] <- "dose2-oral"
}else if(df_serum_male[i,"Dose"] == 48){
df_serum_male[i,"dose_to_plot"] <- "dose3-oral"
}
}
library(ggplot2)
# Defining the linetype and colour of each curve
ltp <- c("dose1-iv" = "twodash", "dose1-oral" = "solid", "dose2-oral" = "dotted","dose3-oral" = "dashed",
"Liver" = "twodash", "Kidneys" = "solid","Brain" = "dotted" )
cls <-  c("dose1-iv" = "#56B4E9",  "dose1-oral" ="#000000", "dose2-oral" = "#009E73",
"dose3-oral" ="#CC79A7",
"Liver" = "#CC79A7", "Kidneys" = "#000000","Brain" = "#56B4E9")
ggplot(data = serum_predictions)+
geom_line(aes(x = Time, y = value, color = dose, linetype = dose), size = 1.5, alpha = 0.7) +
geom_point(data = df_serum_male, aes(x = Time, y = Mass, color = dose_to_plot), size = 4) +
coord_cartesian(ylim = c(1, 1000))+
labs(y = "Concentration (mg/L)",x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5))+
scale_y_log10()+
scale_color_manual("", values=cls)+
scale_linetype_manual("", values=ltp) +
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
axis.title=element_text(size=14),
legend.text = element_text(size=14))
tissue_predictions <- data.frame(Time = rep(solution_oral_12_male$time,3),
value = c(solution_oral_12_male$Cliver,
solution_oral_12_male$Ckidneys,
solution_oral_12_male$Cbrain),
Tissue = c(rep("Liver", dim(solution_oral_12_male)[1]),
rep("Kidneys", dim(solution_oral_12_male)[1]),
rep("Brain", dim(solution_oral_12_male)[1])))
tissue_predictions <- tissue_predictions[tissue_predictions$value != 0 ,]
ggplot(data = tissue_predictions)+
geom_line(aes(x = Time, y = value, color = Tissue, linetype = Tissue), size = 1.5, alpha = 0.7) +
geom_point(data = df_tissue_male, aes(x = Time, y = Mass, color = Tissue), size = 4) +
labs(y = "Concentration (mg/L)",x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5))+
scale_y_log10()+
coord_cartesian(ylim = c(0.1, 100))+
scale_color_manual("", values=cls)+
scale_linetype_manual("", values=ltp) +
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
axis.title=element_text(size=14),
legend.text = element_text(size=14))
tissue_predictions <- tissue_predictions[tissue_predictions$value != 0 ,]
ggplot(data = tissue_predictions)+
geom_line(aes(x = Time, y = value, color = Tissue, linetype = Tissue), size = 1.5, alpha = 0.7) +
geom_point(data = df_tissue_male, aes(x = Time, y = Mass, color = Tissue), size = 4) +
labs(y = "Concentration (mg/L)",x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5))+
#scale_y_log10()+
#coord_cartesian(ylim = c(0.1, 100))+
scale_color_manual("", values=cls)+
scale_linetype_manual("", values=ltp) +
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
axis.title=element_text(size=14),
legend.text = element_text(size=14))
exp(fitted_pars)
goup
group
