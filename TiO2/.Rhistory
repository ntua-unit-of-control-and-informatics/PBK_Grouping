stop(paste0("Compartment ",i," had different length in the observations and predictions"))
}
N_obs[i] <- N # populate tne N_obs vector
for (j in 1:N){
# sum of absolute squared errors (error = observed - predicted)
et <- et + (abs(observed[[i]][j] - predicted[[i]][j]))^2
# Sum of squared observed values
Et <- Et + (observed[[i]][j])^2
}
# root mean square of the absolute error
RMet2 <-sqrt(et/N)
# root mean of the square of observed values
RMEt2 <- sqrt(Et/N)
I[i] <- RMet2/RMEt2
}
# Total number of observations
Ntot <- sum(N_obs)
# Initialise the consolidated discrepancy index
Ic <-0
for (i in 1:Ncomp){
Ic <- Ic +  I[i]* N_obs[i]/Ntot
}
# Name the list of compartment discrepancy indices
if ( !is.null(comp.names)){
names(I) <- comp.names
}else if (!is.null(names(observed))){
names(I) <- names(observed)
} else if (!is.null(names(predicted)) && is.null(comp.names) ){
names(I) <- names(predicted)
}
return(Ic)
#return(list(Total_index = Ic, Compartment_index= I))
}
# Function for estimating all metrics
metric.print <- function(predictions, observations ){
concentrations <- predictions[predictions$Time %in% observations$Time, ]
observed <- list()
predicted <- list()
for (i in 2:(length(concentrations))) {
if(names(concentrations)[i] == "Feces"){
observed[[i-1]] <- observations[3:5,i]
predicted[[i-1]] <- concentrations[3:5,i]
}else{
observed[[i-1]] <- observations[,i]
predicted[[i-1]] <- concentrations[,i]
}
}
print(paste0("pbpk index of model is: ", pbpk.index(observed, predicted)))
print(paste0("R-squared of model is: ", r.squared(observed, predicted)))
print(paste0("AAFE  of model is: ", AAFE(observed, predicted)))
print(paste0("RMSD of model is ", rmsd(observed, predicted)))
print(paste0("2-fold % of model is: ", two.fold(observed, predicted)))
print(paste0("PBKOF of model is: ", PBKOF(observed, predicted)))
}
metric.print(solution_MANG, observations)
metric.print(solution_MING, observations)
metric.print(solution_FPG, observations)
metric.print(solution_PNG, observations)
metric.print(solution_SPPCG, observations)
#####################
#    PLOTS  ########
######################
library(ggplot2)
# Defining the linetype and colour of each curve
ltp <- c("MANG" = "twodash", "FPG" = "solid", "PNG" = "dotted","SPPCG" = "dashed"
,"MING" = "dotdash" )
cls <-  c("MANG" = "#56B4E9",  "FPG" ="#000000", "PNG" = "#009E73", "SPPCG" ="#CC79A7",
"Observations" = "#D55E00"
, "MING" = "#E69F00")
create.plots <- function(compartment){
excreta <- compartment %in% c("Feces", "Urine")
ggplot(data = solution_MANG)+
geom_line( aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"MANG"'),  size=1.5,alpha = 0.7) +
geom_line(data=solution_FPG, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"FPG"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_MING, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"MING"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_PNG, aes_string(x= "Time", y= rlang::expr(!!compartment),
color =  '"PNG"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_SPPCG, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"SPPCG"',), size=1.5,alpha = 0.7) +
geom_point(data=observations, aes_string(x="Time", y= rlang::expr(!!compartment),
color='"Observations"'), size=4)+
labs(title = rlang::expr(!!compartment),
y = ifelse(excreta,expression("TiO2 (" * mu * "g)"),expression("TiO2 (" * mu* "g/g tissue)" )),
x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5))+
{if(compartment %in% c("Blood", "Kidneys", "Bone", "Rob", "Lungs", "Heart" ))scale_y_continuous(trans='log10')}+
scale_color_manual("", values=cls,
guide = guide_legend(override.aes =
list(shape = c(NA, NA,16, NA, NA, NA),
linetype = c(1,1,0,1,1,1))))+
#scale_linetype_manual("Models", values=ltp) +
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
axis.title=element_text(size=14),
legend.text = element_text(size=14))
}
plots <- lapply(names(observations)[2:length(observations)],create.plots)
p1 <-  plots[[1]]
p2 <-  plots[[2]]
p3 <-  plots[[3]]
p4 <-  plots[[4]]
p5 <-  plots[[5]]
p6 <-  plots[[6]]
p7 <-  plots[[7]]
p8 <-  plots[[8]]
p9 <-  plots[[9]]
#gridExtra::grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8, p9,p10, nrow = 4)
#gridExtra::grid.arrange(p5,p6,p7,p8,nrow = 2)
#gridExtra::grid.arrange(p9,p10,nrow = 2)
ggpubr::ggarrange(p1, p2, p3, p4,p5,p6,p7,p8, p9, ncol=3, nrow=4,
common.legend = TRUE, legend="right")
#save.image(file = "Benchmarking.RData")
plot.margin=unit(c(0,0,0,0), "pt")
# Save the plot with dynamically adjusted dimensions
ggsave("model_benchmark_low.png", plot = final_plot,
device = 'png', dpi = 300,
width = 13,
height = 10,
units = "in")
dev.off()
final_plot<-ggpubr::ggarrange(p1, p2, p3, p4,p5,p6,p7,p8, p9, ncol=3, nrow=4,
common.legend = TRUE, legend="right")
#save.image(file = "Benchmarking.RData")
plot.margin=unit(c(0,0,0,0), "pt")
# Save the plot with dynamically adjusted dimensions
ggsave("model_benchmark_low.png", plot = final_plot,
device = 'png', dpi = 300,
width = 13,
height = 10,
units = "in")
dev.off()
p1 <-  plots[[1]]
create.plots <- function(compartment){
excreta <- compartment %in% c("Feces", "Urine")
ggplot(data = solution_MANG)+
geom_line( aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"MANG"'),  size=1.5,alpha = 0.7) +
geom_line(data=solution_FPG, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"FPG"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_MING, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"MING"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_PNG, aes_string(x= "Time", y= rlang::expr(!!compartment),
color =  '"PNG"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_SPPCG, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"SPPCG"',), size=1.5,alpha = 0.7) +
geom_point(data=observations, aes_string(x="Time", y= rlang::expr(!!compartment),
color='"Observations"'), size=4)+
labs(title = rlang::expr(!!compartment),
y = ifelse(excreta,expression("TiO2 (" * mu * "g)"),expression("TiO2 (" * mu* "g/g tissue)" )),
x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5))+
{if(compartment %in% c("Blood", "Kidneys", "Bone", "Rob", "Lungs", "Heart" ))scale_y_continuous(trans='log10')}+
scale_color_manual("", values=cls,
guide = guide_legend(override.aes =
list(shape = c(NA, NA,16, NA, NA, NA),
linetype = c(1,1,0,1,1,1))))+
#scale_linetype_manual("Models", values=ltp) +
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
axis.title=element_text(size=14),
legend.text = element_text(size=14))
}
plots <- lapply(names(observations)[2:length(observations)],create.plots)
create.plots <- function(compartment){
excreta <- compartment %in% c("Feces", "Urine")
ggplot(data = solution_MANG)+
geom_line( aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"MANG"'),  size=1.5,alpha = 0.7) +
geom_line(data=solution_FPG, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"FPG"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_MING, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"MING"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_PNG, aes_string(x= "Time", y= rlang::expr(!!compartment),
color =  '"PNG"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_SPPCG, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"SPPCG"'), size=1.5,alpha = 0.7) +
geom_point(data=observations, aes_string(x="Time", y= rlang::expr(!!compartment),
color='"Observations"'), size=4)+
labs(title = rlang::expr(!!compartment),
y = ifelse(excreta,expression("TiO2 (" * mu * "g)"),expression("TiO2 (" * mu* "g/g tissue)" )),
x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5))+
{if(compartment %in% c("Blood", "Kidneys", "Bone", "Rob", "Lungs", "Heart" ))scale_y_continuous(trans='log10')}+
scale_color_manual("", values=cls,
guide = guide_legend(override.aes =
list(shape = c(NA, NA,16, NA, NA, NA),
linetype = c(1,1,0,1,1,1))))+
#scale_linetype_manual("Models", values=ltp) +
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
axis.title=element_text(size=14),
legend.text = element_text(size=14))
}
plots <- lapply(names(observations)[2:length(observations)],create.plots)
p1 <-  plots[[1]]
p2 <-  plots[[2]]
p3 <-  plots[[3]]
p4 <-  plots[[4]]
p5 <-  plots[[5]]
p6 <-  plots[[6]]
p7 <-  plots[[7]]
p8 <-  plots[[8]]
p9 <-  plots[[9]]
#gridExtra::grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8, p9,p10, nrow = 4)
#gridExtra::grid.arrange(p5,p6,p7,p8,nrow = 2)
#gridExtra::grid.arrange(p9,p10,nrow = 2)
final_plot<-ggpubr::ggarrange(p1, p2, p3, p4,p5,p6,p7,p8, p9, ncol=3, nrow=4,
common.legend = TRUE, legend="right")
#save.image(file = "Benchmarking.RData")
plot.margin=unit(c(0,0,0,0), "pt")
# Save the plot with dynamically adjusted dimensions
ggsave("model_benchmark_low.png", plot = final_plot,
device = 'png', dpi = 300,
width = 13,
height = 10,
units = "in")
dev.off()
create.plots <- function(compartment){
excreta <- compartment %in% c("Feces", "Urine")
ggplot(data = solution_MANG)+
geom_line( aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"MANG"'),  size=1.5,alpha = 0.7) +
geom_line(data=solution_FPG, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"FPG"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_MING, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"MING"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_PNG, aes_string(x= "Time", y= rlang::expr(!!compartment),
color =  '"PNG"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_SPPCG, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"SPPCG"'), size=1.5,alpha = 0.7) +
geom_point(data=observations, aes_string(x="Time", y= rlang::expr(!!compartment),
color='"Observations"'), size=4)+
labs(title = rlang::expr(!!compartment),
y = ifelse(excreta,expression("TiO2 (" * mu * "g)"),expression("TiO2 (" * mu* "g/g tissue)" )),
x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5))+
{if(compartment %in% c("Blood", "Kidneys", "Bone", "Rob", "Lungs", "Heart" ))scale_y_continuous(trans='log10')}+
scale_color_manual("", values=cls,
guide = guide_legend(override.aes =
list(shape = c(NA, NA,16, NA, NA, NA),
linetype = c(1,1,0,1,1,1))))+
#scale_linetype_manual("Models", values=ltp) +
theme_light() +
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
axis.title=element_text(size=14),
legend.text = element_text(size=14))
}
plots <- lapply(names(observations)[2:length(observations)],create.plots)
p1 <-  plots[[1]]
p2 <-  plots[[2]]
p3 <-  plots[[3]]
p4 <-  plots[[4]]
p5 <-  plots[[5]]
p6 <-  plots[[6]]
p7 <-  plots[[7]]
p8 <-  plots[[8]]
p9 <-  plots[[9]]
#gridExtra::grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8, p9,p10, nrow = 4)
#gridExtra::grid.arrange(p5,p6,p7,p8,nrow = 2)
#gridExtra::grid.arrange(p9,p10,nrow = 2)
final_plot<-ggpubr::ggarrange(p1, p2, p3, p4,p5,p6,p7,p8, p9, ncol=3, nrow=4,
common.legend = TRUE, legend="right")
#save.image(file = "Benchmarking.RData")
plot.margin=unit(c(0,0,0,0), "pt")
# Save the plot with dynamically adjusted dimensions
ggsave("model_benchmark_low.png", plot = final_plot,
device = 'png', dpi = 300,
width = 13,
height = 10,
units = "in")
dev.off()
create.plots <- function(compartment){
excreta <- compartment %in% c("Feces", "Urine")
ggplot(data = solution_MANG)+
geom_line( aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"MANG"'),  size=1.5,alpha = 0.7) +
geom_line(data=solution_FPG, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"FPG"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_MING, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"MING"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_PNG, aes_string(x= "Time", y= rlang::expr(!!compartment),
color =  '"PNG"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_SPPCG, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"SPPCG"'), size=1.5,alpha = 0.7) +
geom_point(data=observations, aes_string(x="Time", y= rlang::expr(!!compartment),
color='"Observations"'), size=4)+
labs(title = rlang::expr(!!compartment),
y = ifelse(excreta,expression("TiO2 (" * mu * "g)"),expression("TiO2 (" * mu* "g/g tissue)" )),
x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5))+
{if(compartment %in% c("Blood", "Kidneys", "Bone", "Rob", "Lungs", "Heart" ))scale_y_continuous(trans='log10')}+
scale_color_manual("", values=cls,
guide = guide_legend(override.aes =
list(shape = c(NA, NA,NA, 16, NA, NA),
linetype = c(1,1,1,0,1,1))))+
#scale_linetype_manual("Models", values=ltp) +
theme_light() +
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
axis.title=element_text(size=14),
legend.text = element_text(size=14))
}
plots <- lapply(names(observations)[2:length(observations)],create.plots)
p1 <-  plots[[1]]
p2 <-  plots[[2]]
p3 <-  plots[[3]]
p4 <-  plots[[4]]
p5 <-  plots[[5]]
p6 <-  plots[[6]]
p7 <-  plots[[7]]
p8 <-  plots[[8]]
p9 <-  plots[[9]]
#gridExtra::grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8, p9,p10, nrow = 4)
#gridExtra::grid.arrange(p5,p6,p7,p8,nrow = 2)
#gridExtra::grid.arrange(p9,p10,nrow = 2)
final_plot<-ggpubr::ggarrange(p1, p2, p3, p4,p5,p6,p7,p8, p9, ncol=3, nrow=4,
common.legend = TRUE, legend="right")
#save.image(file = "Benchmarking.RData")
plot.margin=unit(c(0,0,0,0), "pt")
# Save the plot with dynamically adjusted dimensions
ggsave("model_benchmark_low.png", plot = final_plot,
device = 'png', dpi = 300,
width = 13,
height = 10,
units = "in")
dev.off()
library(ggplot2)
# Defining the linetype and colour of each curve
ltp <- c("MANG" = "twodash", "FPG" = "solid", "PNG" = "dotted","SPPCG" = "dashed"
,"MING" = "dotdash" )
cls <-  c("MANG" = "#56B4E9",  "FPG" ="#E69F00", "PNG" = "#009E73", "SPPCG" ="#CC79A7",
"Observations" = "#D55E00"
, "MING" = "#000000")
create.plots <- function(compartment){
excreta <- compartment %in% c("Feces", "Urine")
ggplot(data = solution_MANG)+
geom_line( aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"MANG"'),  size=1.5,alpha = 0.7) +
geom_line(data=solution_FPG, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"FPG"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_MING, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"MING"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_PNG, aes_string(x= "Time", y= rlang::expr(!!compartment),
color =  '"PNG"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_SPPCG, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"SPPCG"'), size=1.5,alpha = 0.7) +
geom_point(data=observations, aes_string(x="Time", y= rlang::expr(!!compartment),
color='"Observations"'), size=4)+
labs(title = rlang::expr(!!compartment),
y = ifelse(excreta,expression("TiO2 (" * mu * "g)"),expression("TiO2 (" * mu* "g/g tissue)" )),
x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5))+
{if(compartment %in% c("Blood", "Kidneys", "Bone", "Rob", "Lungs", "Heart" ))scale_y_continuous(trans='log10')}+
scale_color_manual("", values=cls,
guide = guide_legend(override.aes =
list(shape = c(NA, NA,NA, 16, NA, NA),
linetype = c(1,1,1,0,1,1))))+
#scale_linetype_manual("Models", values=ltp) +
theme_light() +
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
axis.title=element_text(size=14),
legend.text = element_text(size=14))
}
plots <- lapply(names(observations)[2:length(observations)],create.plots)
p1 <-  plots[[1]]
p2 <-  plots[[2]]
p3 <-  plots[[3]]
p4 <-  plots[[4]]
p5 <-  plots[[5]]
p6 <-  plots[[6]]
p7 <-  plots[[7]]
p8 <-  plots[[8]]
p9 <-  plots[[9]]
#gridExtra::grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8, p9,p10, nrow = 4)
#gridExtra::grid.arrange(p5,p6,p7,p8,nrow = 2)
#gridExtra::grid.arrange(p9,p10,nrow = 2)
final_plot<-ggpubr::ggarrange(p1, p2, p3, p4,p5,p6,p7,p8, p9, ncol=3, nrow=4,
common.legend = TRUE, legend="right")
#save.image(file = "Benchmarking.RData")
plot.margin=unit(c(0,0,0,0), "pt")
# Save the plot with dynamically adjusted dimensions
ggsave("model_benchmark_low.png", plot = final_plot,
device = 'png', dpi = 300,
width = 13,
height = 10,
units = "in")
dev.off()
library(ggplot2)
# Defining the linetype and colour of each curve
ltp <- c("MANG" = "twodash", "FPG" = "solid", "PNG" = "dotted","SPPCG" = "dashed"
,"MING" = "dotdash" )
cls <-  c("MANG" = "#56B4E9",  "FPG" ="#000000", "PNG" = "#009E73", "SPPCG" ="#CC79A7",
"Observations" = "#D55E00"
, "MING" = "#E69F00")
create.plots <- function(compartment){
excreta <- compartment %in% c("Feces", "Urine")
ggplot(data = solution_MANG)+
geom_line( aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"MANG"'),  size=1.5,alpha = 0.7) +
geom_line(data=solution_FPG, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"FPG"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_MING, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"MING"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_PNG, aes_string(x= "Time", y= rlang::expr(!!compartment),
color =  '"PNG"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_SPPCG, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"SPPCG"'), size=1.5,alpha = 0.7) +
geom_point(data=observations, aes_string(x="Time", y= rlang::expr(!!compartment),
color='"Observations"'), size=4)+
labs(title = rlang::expr(!!compartment),
y = ifelse(excreta,expression("TiO2 (" * mu * "g)"),expression("TiO2 (" * mu* "g/g tissue)" )),
x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5))+
{if(compartment %in% c("Blood", "Kidneys", "Bone", "Rob", "Lungs", "Heart" ))scale_y_continuous(trans='log10')}+
scale_color_manual("", values=cls,
guide = guide_legend(override.aes =
list(shape = c(NA, NA,NA, 16, NA, NA),
linetype = c(1,1,1,0,1,1))))+
#scale_linetype_manual("Models", values=ltp) +
theme_light() +
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
axis.title=element_text(size=14),
legend.text = element_text(size=14))
}
plots <- lapply(names(observations)[2:length(observations)],create.plots)
p1 <-  plots[[1]]
p2 <-  plots[[2]]
p3 <-  plots[[3]]
p4 <-  plots[[4]]
p5 <-  plots[[5]]
p6 <-  plots[[6]]
p7 <-  plots[[7]]
p8 <-  plots[[8]]
p9 <-  plots[[9]]
#gridExtra::grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8, p9,p10, nrow = 4)
#gridExtra::grid.arrange(p5,p6,p7,p8,nrow = 2)
#gridExtra::grid.arrange(p9,p10,nrow = 2)
final_plot<-ggpubr::ggarrange(p1, p2, p3, p4,p5,p6,p7,p8, p9, ncol=3, nrow=4,
common.legend = TRUE, legend="right")
#save.image(file = "Benchmarking.RData")
plot.margin=unit(c(0,0,0,0), "pt")
# Save the plot with dynamically adjusted dimensions
ggsave("model_benchmark_low.png", plot = final_plot,
device = 'png', dpi = 300,
width = 13,
height = 10,
units = "in")
dev.off()
create.plots <- function(compartment){
excreta <- compartment %in% c("Feces", "Urine")
ggplot(data = solution_MANG)+
geom_line( aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"MANG"'),  size=1.5,alpha = 0.7) +
geom_line(data=solution_FPG, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"FPG"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_MING, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"MING"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_PNG, aes_string(x= "Time", y= rlang::expr(!!compartment),
color =  '"PNG"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_SPPCG, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"SPPCG"'), size=1.5,alpha = 0.7) +
geom_point(data=observations, aes_string(x="Time", y= rlang::expr(!!compartment),
color='"Observations"'), size=4)+
labs(title = rlang::expr(!!compartment),
y = ifelse(excreta,expression("TiO2 (" * mu * "g)"),expression("TiO2 (" * mu* "g/g tissue)" )),
x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5))+
{if(compartment %in% c("Blood", "Kidneys", "Bone", "Rob", "Lungs", "Heart" ))scale_y_continuous(trans='log10')}+
scale_color_manual("", values=cls,
guide = guide_legend(override.aes =
list(shape = c(NA, NA,NA, 16, NA, NA),
linetype = c(1,1,1,0,1,1))))+
#scale_linetype_manual("Models", values=ltp) +
theme_light() +
theme(legend.position=c(1,1),
legend.justification=c(0, 1),
legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
axis.title=element_text(size=14),
legend.text = element_text(size=14)
)
}
plots <- lapply(names(observations)[2:length(observations)],create.plots)
p1 <-  plots[[1]]
p2 <-  plots[[2]]
p3 <-  plots[[3]]
p4 <-  plots[[4]]
p5 <-  plots[[5]]
p6 <-  plots[[6]]
p7 <-  plots[[7]]
p8 <-  plots[[8]]
p9 <-  plots[[9]]
#gridExtra::grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8, p9,p10, nrow = 4)
#gridExtra::grid.arrange(p5,p6,p7,p8,nrow = 2)
#gridExtra::grid.arrange(p9,p10,nrow = 2)
final_plot<-ggpubr::ggarrange(p1, p2, p3, p4,p5,p6,p7,p8, p9, ncol=3, nrow=4,
common.legend = TRUE, legend="right")
#save.image(file = "Benchmarking.RData")
plot.margin=unit(c(0,0,0,0), "pt")
# Save the plot with dynamically adjusted dimensions
ggsave("model_benchmark_low.png", plot = final_plot,
device = 'png', dpi = 300,
width = 13,
height = 10,
units = "in")
dev.off()
