'bAFAT'=bAFAT, 'bATAF'=bATAF, 'bBRF'=bBRF, 'bRFB'=bRFB, 'bRFRT'=bRFRT, 'bRTRF'=bRTRF, 'bLTbile'=bLTbile, 'bBGF'=bBGF, 'bGFB'=bGFB, 'bGFGT'=bGFGT,
'bGTGF'=bGTGF, 'bGLGT'=bGLGT, 'bGTGL'=bGTGL, 'bBMF'=bBMF, 'bMFB'=bMFB, 'bMFMT'=bMFMT, 'bMTMF'=bMTMF,
'Pbclear'=Pbclear, 'bclear'=bclear, 'Pbreab'=Pbreab, 'breab'=breab, 'Pbabs'=Pbabs, 'babs'=babs, 'Pbefflux'=Pbefflux, 'befflux'=befflux,
'MalbB'=MalbB, 'MalbKF'=MalbKF, 'ML_fabpKT1'=ML_fabpKT1, 'ML_fabpKT2'=ML_fabpKT2, 'ML_fabpKT3'=ML_fabpKT3, 'MK_fabpKT'=MK_fabpKT, 'MalbLF'=MalbLF, 'ML_fabpLT1'=ML_fabpLT1,
'ML_fabpLT2'=ML_fabpLT2, 'ML_fabpLT3'=ML_fabpLT3, 'MalbGF'=MalbGF, 'MalbMF'=MalbMF, 'MalbAF'=MalbAF, 'MalbRF'=MalbRF
))
})
}
ode.func <- function(time, inits, params){
with(as.list(c(inits, params)),{
#==========================Protein binding=============================
#MBb: Mass of PFOA in blood bound to albumin, MBf: Mass of PFOA in blood not bound to proteins
dMalbB = koff * MBb - kon * MalbB * MBf / (VB + VLB + VKB + VGB + VMB + VAB + VRB)
CalbB <- MalbB / (VB + VLB + VKB + VGB + VMB + VAB + VRB)
#MKFb: Mass of PFOA in interstitial fluid of kidney bound to albumin, MKFf: Mass of PFOA in blood not bound to proteins
dMalbKF = koff * MKFb - kon * MalbKF * MKFf / VKF
CalbKF <- MalbKF / VKF
#MKTb1: Mass of PFOA in kidney tissue bound to LFABP1, MKTf: Mass of PFOA in kidney tissue not bound to proteins
dML_fabpKT1 = koff * MKTb1 - kL_fabpon1 * ML_fabpKT1 * MKTf / VKT
CL_fabpKT1 <- ML_fabpKT1 / VKT
#MKTb2: Mass of PFOA in kidney tissue bound to LFABP2, MKTf: Mass of PFOA in kidney tissue not bound to proteins
dML_fabpKT2 = koff * MKTb2 - kL_fabpon2 * ML_fabpKT2 * MKTf / VKT
CL_fabpKT2 <- ML_fabpKT2 / VKT
#MKTb3: Mass of PFOA in kidney tissue bound to LFABP3, MKTf: Mass of PFOA in kidney tissue not bound to proteins
dML_fabpKT3 = koff * MKTb3 - kL_fabpon3 * ML_fabpKT3 * MKTf / VKT
CL_fabpKT3 <- ML_fabpKT3 / VKT
#MKTa2b: Mass of PFOA in kidney tissue bound to alpha2mu-globulin, MKTf: Mass of PFOA in kidney tissue not bound to proteins
dMK_fabpKT = koff * MKTa2b - kK_fabpon * MK_fabpKT * MKTf / VKT
Ca2uKT <- MK_fabpKT / VKT
#MLFb: Mass of PFOA in interstitial fluid of liver bound to albumin, MLFf: Mass of PFOA in interstitial fluid of liver not bound to proteins
dMalbLF =koff * MLFb - kon * MalbLF * MLFf / VLF
CalbLF <- MalbLF / VLF
#MLTb1: Mass of PFOA in liver tissue bound to LFABP1, MLTf: Mass of PFOA in liver tissue not bound to proteins
dML_fabpLT1 = koff * MLTb1 - kL_fabpon1 * ML_fabpLT1 * MLTf / VLT
CL_fabpLT1 <- ML_fabpLT1 / VLT
#MLTb2: Mass of PFOA in liver tissue bound to LFABP2, MLTf: Mass of PFOA in liver tissue not bound to proteins
dML_fabpLT2 = koff * MLTb2 - kL_fabpon2 * ML_fabpLT2 * MLTf / VLT
CL_fabpLT2 <- ML_fabpLT2 / VLT
#MLTb3: Mass of PFOA in liver tissue bound to LFABP3, MLTf: Mass of PFOA in liver tissue not bound to proteins
dML_fabpLT3 = koff * MLTb3 - kL_fabpon3 * ML_fabpLT3 * MLTf / VLT
CL_fabpLT3 <- ML_fabpLT3 / VLT
#MGFb: Mass of PFOA in interstitial fluid of gut bound to albumin, MGFf: Mass of PFOA in interstitial fluid of gut not bound to proteins
dMalbGF = koff * MGFb - kon * MalbGF * MGFf / VGF
CalbGF <- MalbGF / VGF
#MMFb: Mass of PFOA in interstitial fluid of muscle bound to albumin, MMFf: Mass of PFOA in interstitial fluid of muscle not bound to proteins
dMalbMF = koff * MMFb - kon * MalbMF * MMFf / VMF
CalbMF <- MalbMF / VMF
#MAFb: Mass of PFOA in interstitial fluid of adipose bound to albumin, MAFf: Mass of PFOA in interstitial fluid of adipose not bound to proteins
dMalbAF = koff * MAFb - kon * MalbAF * MAFf / VAF
CalbAF <- MalbAF / VAF
#MRFb: Mass of PFOA in interstitial fluid of rest of body bound to albumin, MAFf: Mass of PFOA in interstitial fluid of rest of body not bound to proteins
dMalbRF = koff * MRFb - kon * MalbRF * MRFf / VRF
CalbRF <- MalbRF / VRF
#first-order rate constants for passive diffusion and active transport between subcompartments
bBon <- CalbB * kon
bBoff <- koff
bKFon <- CalbKF * kon
bKFoff <- koff
bKTon1 <- CL_fabpKT1 * kL_fabpon1
bKTon2 <- CL_fabpKT2 * kL_fabpon2
bKTon3 <- CL_fabpKT3 * kL_fabpon3
bKToff <- koff
bKTa2on <- Ca2uKT * kK_fabpon
bKTa2off <- koff
bLFon <- CalbLF * kon
bLFoff <- koff
bLFon1 <- CL_fabpLT1 * kL_fabpon1
bLFon2 <- CL_fabpLT2 * kL_fabpon2
bLFon3 <- CL_fabpLT3 * kL_fabpon3
bLFoff <- koff
bGFon <- CalbGF * kon
bGFoff <- koff
bMFon <- CalbMF * kon
bMFoff <- koff
bAFon <- CalbAF * kon
bAFoff <- koff
bRFon <- CalbRF * kon
bRFoff <- koff
#====================PFOA mass balance at each tissue or fluid compartment==============================
#Blood subcompartment
dMBf = (bKFB*MKFf + bLFB*MLFf + bGFB*MGFf + bMFB*MMFf + bAFB*MAFf + bRFB*MRFf) - (bBKF*MBf + bBLF*MBf + bBGF*MBf + bBMF*MBf + bBAF*MBf + bBRF*MBf) + bFB*MFilf - bBF*MBf + bBoff*MBb - bBon*MBf
dMBb = bBon*MBf - bBoff*MBb #PFOA in blood bound to albumin
#==================================================  Interstitial fluid
#Kidney interstitial fluid subcompartment (bclear = bKoat1 + bKoat3)
dMKFf = bBKF*MBf - bKFB*MKFf + bKTKF*MKTf - bKFKT*MKFf + befflux*MKTf - bclear*MKFf + bKFoff*MKFb - bKFon*MKFf
dMKFb = bKFon*MKFf - bKFoff*MKFb #Mass of PFOA in interstitial fluid of kidney bound to albumin
#Liver interstitial fluid subcompartment
dMLFf = bBLF*MBf - bLFB*MLFf + bLTLF*MLTf - bLFLT*MLFf - babs*MLFf + bLFoff*MLFb - bLFon*MLFf
dMLFb = bLFon*MLFf - bLFoff*MLFb #Mass of PFOA in interstitial fluid of liver bound to albumin
#Gut interstitial fluid subcompartment
dMGFf = bBGF*MBf - bGFB*MGFf + bGTGF*MGTf - bGFGT*MGFf + bGFoff*MGFb - bGFon*MGFf
dMGFb = bGFon*MGFf - bGFoff*MGFb #Mass of PFOA in interstitial fluid of gut bound to albumin
#Muscle interstitial fluid subcompartment
dMMFf = bBMF*MBf - bMFB*MMFf + bMTMF*MMTf - bMFMT*MMFf + bMFoff*MMFb - bMFon*MMFf
dMMFb = bMFon*MMFf - bMFoff*MMFb #Mass of PFOA in interstitial fluid of muscle bound to albumin
#Adipose interstitial fluid subcompartment
dMAFf = bBAF*MBf - bAFB*MAFf + bATAF*MATf - bAFAT*MAFf + bAFoff*MAFb - bAFon*MAFf
dMAFb = bAFon*MAFf - bAFoff*MAFb #Mass of PFOA in interstitial fluid of adipose bound to albumin
#Rest of body interstitial fluid subcompartment
dMRFf = bBRF*MBf - bRFB*MRFf + bRTRF*MRTf - bRFRT*MRFf + bRFoff*MRFb - bRFon*MRFf
dMRFb = bRFon*MRFf - bRFoff*MRFb #Mass of PFOA in interstitial fluid of rest of body bound to albumin
#==================================================  Tissue
#Adipose tissue subcompartment
dMATf = bAFAT*MAFf - bATAF*MATf
#Muscle tissue subcompartment
dMMTf = bMFMT*MMFf - bMTMF*MMTf
#Rest of body tissue subcompartment
dMRTf = bRFRT*MRFf - bRTRF*MRTf
#Kidney tissue subcompartment
dMKTf = bKFKT*MKFf - bKTKF*MKTf + bclear*MKFf - befflux*MKTf + bFKT*MFilf - bKTF*MKTf + breab*MFilf - (bKTon1*MKTf - bKToff*MKTb1) - (bKTon2*MKTf - bKToff*MKTb2) - (bKTon3*MKTf - bKToff*MKTb3) - (bKTa2on*MKTf - bKTa2off*MKTa2b)
dMKTb1 = bKTon1*MKTf - bKToff*MKTb1 #PFOA in kidney tissue bound to LFABP1
dMKTb2 = bKTon2*MKTf - bKToff*MKTb2 #PFOA in kidney tissue bound to LFABP2
dMKTb3 = bKTon3*MKTf - bKToff*MKTb3 #PFOA in kidney tissue bound to LFABP3
dMKTa2b = bKTa2on*MKTf - bKTa2off*MKTa2b #PFOA in kidney tissue bound to alpha2mu-globulin
dMFilf = bBF*MBf - bFB*MFilf + bKTF*MKTf - bFKT*MFilf - breab*MFilf - (Qurine/VFil)*MFilf
dMurine = (Qurine/VFil)*MFilf
#Liver tissue subcompartment
dMLTf = bLFLT*MLFf - bLTLF*MLTf + babs*MLFf + bbileLT*Mbilef - bLTbile*MLTf - (bLFon1*MLTf - bLFoff*MLTb1) - (bLFon2*MLTf - bLFoff*MLTb2) - (bLFon3*MLTf - bLFoff*MLTb3)
dMLTb1 = bLFon1*MLTf - bLFoff*MLTb1 #PFOA in liver tissue bound to LFABP1
dMLTb2 = bLFon2*MLTf - bLFoff*MLTb2 #PFOA in liver tissue bound to LFABP2
dMLTb3 = bLFon3*MLTf - bLFoff*MLTb3 #PFOA in liver tissue bound to LFABP3
dMbilef = bLTbile*MLTf - bbileLT*Mbilef - (Qbile/Vbile)*Mbilef
#dMbile = (Qbile/Vbile)*Mbilef
#Gut tissue subcompartment
dMGTf = bGFGT*MGFf - bGTGF*MGTf + bGLGT*MGLf - bGTGL*MGTf
dMGLf = bGTGL*MGTf - bGLGT*MGLf + (Qbile/Vbile)*Mbilef - (Qfeces/VGL)*MGLf
dMfeces = (Qfeces/VGL)*MGLf
return(list(c('dMBf'=dMBf, 'dMBb'=dMBb, 'dMKFf'=dMKFf, 'dMKFb'=dMKFb,'dMLFf'=dMLFf, 'dMLFb'=dMLFb, 'dMGFf'=dMGFf, 'dMGFb'=dMGFb, 'dMMFf'=dMMFf, 'dMMFb'=dMMFb, 'dMAFf'=dMAFf, 'dMAFb'=dMAFb,
'dMRFf'=dMRFf, 'dMRFb'=dMRFb, 'dMATf'=dMATf, 'dMMTf'=dMMTf, 'dMRTf'=dMRTf, 'dMKTf'=dMKTf, 'dMKTb1'=dMKTb1, 'dMKTb2'=dMKTb2, 'dMKTb3'=dMKTb3, 'dMKTa2b'=dMKTa2b, 'dMFilf'=dMFilf, 'dMurine'=dMurine,
'dMLTf'=dMLTf, 'dMLTb1'=dMLTb1, 'dMLTb2'=dMLTb2, 'dMLTb3'=dMLTb3, 'dMbilef'=dMbilef, #'dMbile'=dMbile,
'dMGTf'=dMGTf, 'dMGLf'=dMGLf, 'dMfeces'=dMfeces, 'dMalbB'=dMalbB, 'dMalbKF'=dMalbKF, 'dML_fabpKT1'=dML_fabpKT1,
'dML_fabpKT2'=dML_fabpKT2, 'dML_fabpKT3'=dML_fabpKT3, 'dMK_fabpKT'=dMK_fabpKT, 'dMalbLF'=dMalbLF, 'dML_fabpLT1'=dML_fabpLT1,
'dML_fabpLT2'=dML_fabpLT2, 'dML_fabpLT3'=dML_fabpLT3, 'dMalbGF'=dMalbGF, 'dMalbMF'=dMalbMF, 'dMalbAF'=dMalbAF, 'dMalbRF'=dMalbRF
)))
})
}
#Initial condition for each compartment.
create.inits <- function(parameters){
with(as.list(parameters),{
MBf <- admin.dose *BW
MBb <- 0; MKFf <- 0; MKFb <- 0; MLFf <- 0; MLFb <- 0; MGFf <- 0; MGFb <- 0; MMFf <- 0; MMFb <- 0; MAFf <- 0; MAFb <- 0; MRFf <- 0; MRFb <- 0;
MATf <- 0; MMTf <- 0; MRTf <- 0; MKTf <- 0; MKTb1 <- 0; MKTb2 <- 0; MKTb3 <- 0; MKTa2b <-0;
MFilf <- 0; Murine <- 0; MLTf <- 0; MLTb1 <- 0; MLTb2 <- 0; MLTb3 <- 0; Mbilef <- 0; Mbile <- 0; MGTf <- 0;  MGLf <- 0; Mfeces <-0
MalbB <- MalbB; MalbKF <- MalbKF; ML_fabpKT1 <- ML_fabpKT1; ML_fabpKT2 <- ML_fabpKT2; ML_fabpKT3 <- ML_fabpKT3; MK_fabpKT <- MK_fabpKT;
MalbLF <- MalbLF; ML_fabpLT1 <- ML_fabpLT1; ML_fabpLT2 <- ML_fabpLT2; ML_fabpLT3 <- ML_fabpLT3; MalbGF <- MalbGF; MalbMF <- MalbMF; MalbAF <- MalbAF; MalbRF <- MalbRF
return(c('MBf'=MBf, 'MBb'=MBb, 'MKFf'=MKFf, 'MKFb'=MKFb,'MLFf'=MLFf, 'MLFb'=MLFb, 'MGFf'=MGFf, 'MGFb'=MGFb, 'MMFf'=MMFf, 'MMFb'=MMFb, 'MAFf'=MAFf, 'MAFb'=MAFb,
'MRFf'=MRFf, 'MRFb'=MRFb, 'MATf'=MATf, 'MMTf'=MMTf, 'MRTf'=MRTf, 'MKTf'=MKTf, 'MKTb1'=MKTb1, 'MKTb2'=MKTb2, 'MKTb3'=MKTb3, 'MKTa2b'=MKTa2b, 'MFilf'=MFilf, 'Murine'=Murine,
'MLTf'=MLTf, 'MLTb1'=MLTb1, 'MLTb2'=MLTb2, 'MLTb3'=MLTb3, 'Mbilef'=Mbilef, #'Mbile'=Mbile,
'MGTf'=MGTf, 'MGLf'=MGLf, 'Mfeces'=Mfeces, 'MalbB'=MalbB, 'MalbKF'=MalbKF, 'ML_fabpKT1'=ML_fabpKT1,
'ML_fabpKT2'=ML_fabpKT2, 'ML_fabpKT3'=ML_fabpKT3, 'MK_fabpKT'=MK_fabpKT, 'MalbLF'=MalbLF, 'ML_fabpLT1'=ML_fabpLT1,
'ML_fabpLT2'=ML_fabpLT2, 'ML_fabpLT3'=ML_fabpLT3, 'MalbGF'=MalbGF, 'MalbMF'=MalbMF, 'MalbAF'=MalbAF, 'MalbRF'=MalbRF
))
})
}
################################################################################
BW <- 0.244  # body weight (kg)
admin.dose <- c(1e-6) # administered dose in kg PFOA/kg BW
admin.time <- c(0) # time when doses are administered, in days
user_input <- list('BW'=BW,
"admin.dose"=admin.dose)
params <- create.params(user_input)
inits <- create.inits(params)
sample_time=seq(0,22,1)
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func, y = inits, parms = params,
method="lsodes",rtol = 1e-05, atol = 1e-05))
rowSums(solution[,c(2:33)])
solution['Murine']*1e+06
atanh(c(-7.07521e-01, -4.70188e-01, -1.70537e+00, 3.73445e-01, -1.43660e+00, -2.16617e-01, 1.03247e+00, -9.18510e-01, 2.63016e-01, 9.11780e-02, -1.76631e-01, 1.13618e+00, -3.66894e-01, 8.03276e-01, -2.61601e-01))
tanh(c(-7.07521e-01, -4.70188e-01, -1.70537e+00, 3.73445e-01, -1.43660e+00, -2.16617e-01, 1.03247e+00, -9.18510e-01, 2.63016e-01, 9.11780e-02, -1.76631e-01, 1.13618e+00, -3.66894e-01, 8.03276e-01, -2.61601e-01))
tanh(c(-2.24719e-01, 8.96540e-01, -5.28933e-01))
tanh(c(-3.98418e-01, 6.04595e-01, -4.49424e-01))
tanh(c(-5.56448e-01, 6.85930e-01, -4.68040e-01))
tanh(c(-4.55106e+00, -1.11089e+00, 1.24744e+00))
tanh(c(-5.03946e-01, 1.30598e-02, -2.05210e+00))
tanh(c(-5.24529e-01, 3.45695e-02, -2.54499e+00))
tanh(c(-3.75260e-01, 3.22072e-01, -2.86140e+00))
tanh(c(-1.21592e+00, 2.71279e-01, -1.05469e+00))
tanh(c(-8.14604e-01, 1.63164e-01, -1.54803e+00))
tanh(c(-7.24232e-01, 4.25629e-03, -1.44768e+00))
tanh(c(-6.67189e-01, 9.49499e-03, -1.45345e+00))
tanh(c(-3.84198e-01, -4.13975e-01, -9.44935e-01))
tanh(c(-4.23954e-01, -3.67379e-01, -9.40453e-01))
tanh(c(-3.78044e-01, -6.14474e-01, -3.95119e-01, 2.53637e+00, -1.02162e+00, -6.41716e-01, 2.30570e+00, -4.38702e-01, -3.70161e-01, -6.35963e-01, -5.61435e-01, 3.14438e+00, -4.23954e-01, -3.67379e-01, -9.40453e-01))
tanh(c(-8.26841e-01, -4.42740e-01, -9.92460e-01, 2.20403e+00, -1.89349e+00, -4.41225e-01, 2.18513e+00, -8.64440e-01, 1.45304e-01, -2.85700e-01, -3.72746e-01, 2.16186e+00, -9.37511e-01, 2.91937e-01, -1.47231e+00))
tanh(c(-6.66253e-01, -7.05155e-01, -8.06896e-01, 2.17609e+00, -1.34301e+00, -1.74093e-01, 2.09904e+00, -6.43528e-01, 1.14902e-01, -1.83359e-01, -8.36458e-01, 2.07052e+00, -6.80686e-01, 2.02732e-01, -1.48032e+00))
log((0.48822650432832726**2) / sqrt((0.48822650432832726**2) + (0.07692899039418483**2)))
tanh(c(-1.16608e+00, -5.84749e-01, -6.78229e-01, 1.37537e+00, -1.10181e+00, 8.66105e-02, 1.34801e+00, -7.73037e-01, 2.79882e-01, -5.39363e-02, -4.29292e-01, 1.84816e+00, -1.74779e-01, -3.74991e-02, -9.80764e-01))
tanh(c(-4.84784e-01, 3.88873e-02, -1.25737e+00))
tanh(c( -5.28901e-01, 4.61806e-02, -1.23530e+00))
tanh(c(-2.64090e-01, -8.38214e-03, -9.69767e-01))
tanh(c(-4.79041e-01, 7.69863e-02, -1.24506e+00))
tanh(c(-1.39875e+00, -5.59890e-01, -9.79616e-01, 1.93032e+00, -1.03615e+00, 1.17331e-04, 1.99842e+00, -9.60454e-01, 3.48072e-01, -2.08317e-01, -9.13281e-01, 2.62870e+00, -6.05748e-01, 1.09641e-01, -1.57412e+00))
tanh(c(9.26859e-04, -2.56237e-01, -6.74667e-01))
tanh(c(-1.11071e+00, -1.26126e-02, -2.70055e-01))
tanh(c(-1.03209e+00, -3.18893e-01, -1.20107e+00, 1.24434e+00, -6.32669e-01, -3.06114e-01, 2.17991e+00, -1.71214e+00, -7.65333e-02, -3.06884e-01, -2.53519e-02, 2.46457e+00, -1.34507e+00, -4.14715e-02, -2.39289e-01))
τανη(ψ( -9.69480e-01, -8.80559e-01, 1.25064e+00))
tanh(c( -9.69480e-01, -8.80559e-01, 1.25064e+00))
tanh(c(-8.20548e-03, -1.49981e-01, -4.34117e-01, 3.54407e-01, -4.63582e-01, -1.91998e+00, 1.53755e+00, -1.69526e+00, -1.50673e+00, -1.22898e+00, 1.20553e+00, 2.06083e+00, -2.32371e+00, -8.07260e-01, 8.60548e-01))
tanh(c(-9.03177e-03, -1.45465e-01, -4.35892e-01, 3.61175e-01, -4.61830e-01, -2.09689e+00, 1.54736e+00, -1.73378e+00, -1.51750e+00, -1.22834e+00, 1.26563e+00, 2.05644e+00, -2.55861e+00, -7.98039e-01, 8.69633e-01))
tanh(c(3.18399e-01, -3.04058e-01, -2.97008e-01, -1.95925e-01, -5.46793e-01, -1.35614e+00, 1.12291e+00, -1.37807e+00, -1.80356e+00, -1.17967e+00, 6.29950e-01, 1.86061e+00, -7.33964e-01, -8.85401e-01, 8.93632e-01))
tanh(c(3.41403e-01, -3.43127e-01, -2.80458e-01, -2.66547e-01, -5.84788e-01, -1.69538e+00, 1.20088e+00, -1.72657e+00, -1.96648e+00, -1.22033e+00, 9.94283e-01, 2.00651e+00, -9.45443e-01, -8.81881e-01, 1.20858e+00))
tanh(c(1.80457e-01, 7.64138e-02, -4.64558e-01, 2.76315e-01, -4.02389e-01, -1.10555e+00, 9.47976e-01, -8.28892e-01, -1.86567e+00, -1.54820e+00, 3.06434e-01, 1.28983e+00, -5.68738e-01, -8.13099e-01, 4.28233e-01))
tanh(c( 2.97533e-01, 1.25759e-01, -4.51005e-01, 6.88048e-02, -4.36612e-01, -1.07229e+00, 8.45677e-01, -8.40058e-01, -2.34775e+00, -1.63233e+00, 3.59652e-01, 1.19432e+00, -4.73343e-01, -8.00377e-01, 5.37939e-01))
tanh(c(2.97533e-01, 1.25759e-01, -4.51005e-01, 6.88048e-02, -4.36612e-01, -1.07229e+00, 8.45677e-01, -8.40058e-01, -2.34775e+00, -1.63233e+00, 3.59652e-01, 1.19432e+00, -4.73343e-01, -8.00377e-01, 5.37939e-01))
τανη(ψ(-2.19709e-02, 8.49774e-02, -5.01879e-01, 2.85969e-01, -4.45423e-01, -9.14408e-01, 1.22405e+00, -9.27196e-01, -1.76336e+00, -1.34418e+00, 1.27684e-01, 1.39034e+00, -5.78915e-01, -8.76949e-01, 3.94982e-01))
tanh(c())
tanh(c(-2.19709e-02, 8.49774e-02, -5.01879e-01, 2.85969e-01, -4.45423e-01, -9.14408e-01, 1.22405e+00, -9.27196e-01, -1.76336e+00, -1.34418e+00, 1.27684e-01, 1.39034e+00, -5.78915e-01, -8.76949e-01, 3.94982e-01))
tanh(c(6.87279e-02, 3.63490e-02, -5.73022e-01, 1.82644e-01, -2.97514e-01, -1.39707e+00, 1.03121e+00, -7.72050e-01, -2.04769e+00, -1.26561e+00, 3.08835e-01, 1.66868e+00, -4.88582e-01, -8.25559e-01, 4.55838e-01))
tanh(c(-1.19067e-01, -4.19820e-02, -5.06812e-01, 5.07745e-01, -4.44351e-01, -1.08907e+00, 1.36502e+00, -1.02753e+00, -1.32334e+00, -1.23016e+00, 2.81997e-01, 1.82101e+00, -7.78415e-01, -8.10033e-01, 3.38255e-01))
tanh(c(-2.40733e-01, -6.33848e-02, -4.27926e-01, 5.09008e-01, -4.09850e-01, -6.98969e-01, 1.17066e+00, -7.52246e-01, -8.20816e-01, -1.14452e+00, -1.54602e-01, 1.33948e+00, -2.43815e-01, -8.38247e-01, -7.66449e-02))
tanh(c(6.87279e-02, 3.63490e-02, -5.73022e-01, 1.82644e-01, -2.97514e-01, -1.39707e+00, 1.03121e+00, -7.72050e-01, -2.04769e+00, -1.26561e+00, 3.08835e-01, 1.66868e+00, -4.88582e-01, -8.25559e-01, 4.55838e-01))
tanh(c(-1.78689e-01, -4.89650e-02, -4.89797e-01, 5.87811e-01, -4.34022e-01, -1.02174e+00, 1.53821e+00, -1.19189e+00, -1.06366e+00, -1.19838e+00, 3.64246e-01, 1.45713e+00, -1.00006e+00, -7.70016e-01, 3.41906e-01))
tanh(c(-2.23184e-01, 1.32399e-01, -6.49214e-01, 6.72185e-01, -4.36106e-01, -5.86956e-01, 1.49010e+00, -1.07966e+00, -1.65881e+00, -1.16494e+00, 5.01284e-02, 1.49247e+00, -7.78920e-01, -1.18034e+00, 2.71942e-01))
tanh(c(-3.42265e-01, 2.15226e-01, -7.09899e-01, 8.00975e-01, -4.35754e-01, -8.01904e-01, 1.63152e+00, -1.41297e+00, -1.42231e+00, -1.34732e+00, 4.24823e-01, 2.04438e+00, -1.18661e+00, -1.72810e+00, 4.75331e-01))
tanh(c(2.39478e-01, -2.78564e-01, -2.88783e-01, 3.03592e-01, -5.77824e-01, -8.35174e-01, 1.03709e+00, -7.91946e-01, -1.31924e+00, -1.08581e+00, -7.86167e-02, 1.54546e+00, -4.50082e-01, -8.29394e-01, 1.57585e-01))
tanh(c(1.76218e-01, -3.07621e-01, -2.96314e-01, 4.10083e-01, -6.13881e-01, -1.10598e+00, 1.22389e+00, -9.85339e-01, -1.31846e+00, -1.09447e+00, 2.89293e-01, 1.70104e+00, -9.17707e-01, -7.76892e-01, 3.33407e-01))
tanh(c(1.23684e-01, -3.10193e-01, -3.21795e-01, 4.88782e-01, -6.12215e-01, -1.44605e+00, 1.39001e+00, -1.11996e+00, -1.34598e+00, -1.10495e+00, 5.85301e-01, 1.89889e+00, -1.42650e+00, -7.44976e-01, 4.35434e-01))
tanh(-1.57)
tanh(c(-1.55100e+00, 1.68048e-01, -3.32236e-01, -2.80471e-01, 4.67686e-01, -6.28498e-01, -1.21307e+00, 1.31690e+00, -9.31718e-01, -1.32819e+00, -1.11724e+00, 3.45864e-01, 1.80833e+00, -9.94030e-01, -7.89085e-01, 3.19401e-01))
tanh(c(3.50878e-01, -4.24544e-01, -2.24743e-01, 1.30260e-01, -6.84546e-01, -1.24123e+00, 1.11317e+00, -8.86428e-01, -1.56347e+00, -1.06776e+00, 2.66488e-01, 1.83218e+00, -6.87031e-01, -8.09316e-01, 4.02321e-01))
tanh(c(1.12649e-01, -3.59405e-01, -2.86687e-01, 5.60965e-01, -6.77344e-01, -1.74304e+00, 1.67799e+00, -1.05354e+00, -1.37660e+00, -1.17183e+00, 6.21261e-01, 2.27161e+00, -1.49243e+00, -7.18623e-01, 3.63831e-01))
tanh(c(1.55594e-01, -3.59888e-01, -3.39149e-01, 4.76784e-01, -6.18137e-01, -1.32289e+00, 1.99627e+00, -9.46275e-01, -1.38545e+00, -1.33383e+00, 3.57357e-01, 1.91000e+00, -1.00037e+00, -9.45958e-01, 3.49579e-01))
tanh(c(2.25868e-01, -3.57043e-01, -2.66687e-01, 3.47815e-01, -6.38564e-01, -9.79400e-01, 1.17408e+00, -8.82179e-01, -1.29521e+00, -1.07381e+00, 1.40246e-01, 1.68166e+00, -7.02116e-01, -7.98971e-01, 2.60541e-01))
tanh(c(2.56406e-01, -3.15358e-01, -2.42825e-01, 3.14674e-01, -6.33367e-01, -9.13974e-01, 1.03363e+00, -7.74650e-01, -1.26755e+00, -1.08138e+00, 3.49604e-02, 1.59662e+00, -5.14982e-01, -8.17107e-01, 1.72612e-01))
tanh(c(7.53087e-01, -5.87740e-01, 2.00941e-01, -1.29145e+00, -1.36445e+00, -2.03376e+00, 1.39498e+00, -4.78921e-01, -1.68924e+00, -1.75503e+00, 2.53008e-01, 1.36583e+00, 2.34590e-02, -7.92699e-01, 8.12479e-01))
tanh(c(7.52891e-01, -5.92634e-01, 2.08458e-01, -1.34596e+00, -1.38079e+00, -2.06137e+00, 1.42607e+00, -4.88478e-01, -1.66769e+00, -1.78771e+00, 2.74471e-01, 1.36872e+00, 1.75810e-02, -7.91198e-01, 8.28823e-01))
tanh(c(-8.29381e-02, -5.45531e-02, -5.09975e-01, 7.66142e-01, -6.56247e-01, -2.20875e+00, 1.92022e+00, -1.31112e+00, -1.53395e+00, -1.44172e+00, 1.02190e+00, 2.78050e+00, -2.99131e+00, -5.40245e-01, 3.19286e-01))
tanh(c(-1.74284e-01, 1.23267e-01, -5.78880e-01, 8.75440e-01, -7.90073e-01, -2.03170e+00, 1.55302e+00, -1.35645e+00, -1.88111e+00, -1.41873e+00, 1.19102e+00, 3.66089e+00, -4.56537e+00, -6.84652e-01, 3.69767e-01))
tanh(c(-6.03503e-01, 1.49669e-02, -1.18653e+00, 1.80052e+00, -1.64717e+00, -1.10091e+00, 2.52254e+00, -1.66981e+00, -3.52824e-01, -7.80526e-01, 5.50097e-01, 2.98114e+00, -4.03487e+00, 3.77613e-01, -6.03292e-01))
tanh(c(-9.02202e-01, -2.33463e-01, -1.07561e+00, 1.47495e+00, -6.28727e-01, -5.16006e-01, 4.26058e+00, -1.97048e+00, -1.93824e-01, -4.18113e-01, 2.08051e-01, 4.35198e+00, -2.54645e+00, -9.78342e-02, -1.20067e-01))
tanh(c(-4.96673e-01, -4.46585e-01, -6.62753e-01, 7.27120e-01, -7.85870e-01, -5.50500e-01, 1.19001e+00, -5.94445e-01, -3.20200e-01, -4.05662e-01, -2.15878e-01, 1.56607e+00, -1.68006e-01, -2.14293e-01, -4.61402e-01))
tanh(c(-4.96454e-01, -4.35770e-01, -6.66138e-01, 5.94795e-01, -7.57651e-01, -3.99355e-01, 1.05837e+00, -6.13557e-01, -3.04138e-01, -2.78175e-01, -9.33487e-02, 1.35802e+00, -8.68994e-02, -2.16452e-01, -3.54772e-01))
tanh(c(-4.49788e-01, -3.66902e-01, -7.45572e-01, 7.74149e-01, -8.31494e-01, -6.54173e-01, 1.16508e+00, -7.05843e-01, -3.16453e-01, -5.30160e-01, -2.40810e-01, 1.73566e+00, -3.21151e-01, -1.33460e-01, -4.71373e-01))
tanh(c(-3.56948e-01, -3.55067e-01, -7.59875e-01, 6.98960e-01, -8.64520e-01, -7.05721e-01, 1.10621e+00, -6.80482e-01, -3.98139e-01, -5.38329e-01, -2.40722e-01, 1.62394e+00, -3.50606e-01, -1.15583e-01, -3.98868e-01))
tanh(c(-3.25784e-01, -3.30038e-01, -7.66885e-01, 6.80642e-01, -9.00567e-01, -7.39129e-01, 1.08299e+00, -6.71716e-01, -4.08050e-01, -5.99180e-01, -2.50434e-01, 1.47641e+00, -3.56261e-01, -1.14908e-01, -4.04090e-01))
tanh(c(-1.94577e-01, -3.46490e-01, -6.35452e-01, 4.97631e-01, -8.95483e-01, -6.32284e-01, 9.36088e-01, -4.69546e-01, -5.07989e-01, -5.41042e-01, -3.42789e-01, 1.21087e+00, -4.00192e-02, -1.74096e-01, -4.06823e-01))
tanh(c(-3.72483e-01, -3.04619e-01, -7.93963e-01, 7.47470e-01, -8.88076e-01, -7.55085e-01, 1.14691e+00, -7.20366e-01, -4.00553e-01, -5.75744e-01, -2.06722e-01, 1.54151e+00, -4.21287e-01, -8.32616e-02, -3.86131e-01))
tanh(c(-6.73181e-01, -3.67765e-01, -8.43416e-01, 7.72666e-01, -7.67862e-01, -4.86382e-01, 1.21031e+00, -8.69081e-01, -1.77135e-01, -4.40638e-01, -1.99994e-01, 1.93353e+00, -3.58276e-01, -1.12808e-01, -4.13650e-01))
tanh(c(-8.31193e-01, -3.38133e-01, -8.88348e-01, 7.80641e-01, -6.99088e-01, -3.91105e-01, 1.22219e+00, -9.15307e-01, -9.54346e-02, -4.20149e-01, -2.09024e-01, 1.84441e+00, -3.25361e-01, -1.18491e-01, -4.27047e-01))
tanh(c(-3.30855e-01, -3.08544e-01, -8.02519e-01, 7.08414e-01, -8.92996e-01, -7.39086e-01, 1.10485e+00, -7.03326e-01, -4.41676e-01, -5.79702e-01, -2.49869e-01, 1.57768e+00, -4.15874e-01, -1.04945e-01, -3.95852e-01))
tanh(c(-5.07820e-01, -2.92931e-01, -7.81107e-01, 7.46668e-01, -7.95694e-01, -6.65646e-01, 1.12426e+00, -7.36117e-01, -2.87767e-01, -5.73243e-01, -2.01032e-01, 1.57000e+00, -2.71011e-01, -1.30465e-01, -4.43464e-01))
tanh(c(-6.15409e-01, -1.16160e+00, 3.06528e-01))
tanh(c(-0.653947,	-1.21191,	0.183694))
tanh(c(-6.58289e-01, -1.16172e+00, 3.22334e-01))
tanh(c(-5.97073e-01, -1.11101e+00, 3.34689e-01))
tanh(c(-5.97073e-01, -1.11101e+00, 3.34689e-01))
tanh(c(-5.97073e-01, -1.11101e+00, 3.34689e-01))
tanh(c(-5.66019e-01, -1.12711e+00, 2.64229e-01))
tanh(c(-6.23589e-01, -1.07416e+00, 3.03259e-01))
tanh(c( -6.57860e-01, -1.20543e+00, 3.48140e-01))
tanh(c(9.19364e-01, -6.50854e-01, -1.17074e+00))
tanh(c(-6.50854e-01, -1.17074e+00, 4.94241e-01))
tanh(c(-6.25816e-01, -1.12747e+00, 3.28221e-01))
tanh(c(-1.41497e-01, -2.53694e-01, 1.29633e-01))
tanh(c(-5.22432e-01, -1.14761e+00, 3.33161e-01))
tanh(c(-7.32315e-01, -1.19631e+00, 3.72544e-01))
tanh(c(-6.52398e-01, -1.14765e+00, 3.34226e-01))
tanh(c(-5.13750e-01, -1.13826e+00, 2.19674e-01))
tanh(c( -4.80824e-01, -1.14536e+00, 1.97430e-01))
523/60
tanh(c( -5.99501e-01, -1.18297e+00, 3.26536e-01))
tanh(c(-8.06062e-01, -1.08446e+00, 4.64384e-01))
4.1*1.3
4.1*1.3
library(ggplot2)
setwd("/Users/vassilis/Documents/GitHub/PBK_Grouping/Validation/Validation_results_data")
column_names <- c('Study', 'NM Size', 'Anatase %', 'Rutile %', 'Dose',
'Injections',  'Tissue', 'Observed',   'Predicted')
# Load Results
Disdier_results <- read.csv("Disdier_results.csv", header = T)
colnames(Disdier_results) <- column_names
for (i in 1:dim(Disdier_results)[1]) {
Disdier_results[i,10] <- paste0(Disdier_results$Study[i],
", Dose (ug) = ",Disdier_results$Dose[i])
}
colnames(Disdier_results)[10] <- "Experiment"
###############################################
Fabian_results <- read.csv("Fabian_results.csv", header = T)
colnames(Fabian_results) <- column_names
for (i in 1:dim(Fabian_results)[1]) {
Fabian_results[i,10] <- paste0(Fabian_results$Study[i],
", Dose (ug) = ",Fabian_results$Dose[i])
}
colnames(Fabian_results)[10] <- "Experiment"
###############################################
Garaets_results <- read.csv("Garaets_results.csv", header = T)
colnames(Garaets_results) <- column_names
for (i in 1:dim(Garaets_results)[1]) {
Garaets_results[i,10] <- paste0(Garaets_results$Study[i],
", Dose (ug) = ",Garaets_results$Dose[i])
}
colnames(Garaets_results)[10] <- "Experiment"
# names(Experiment) <- unique(c(expression("Disdier et al. (2015), Dose (" * mu* "g) = 215"),
#                               expression("Fabian et al. (2008), Dose (" * mu* "g) = 1250"),
#                               expression("Garaets et al. (2014), Dose (" * mu*  "g) = 2300"),
#                               expression("Garaets et al. (2014), Dose (" * mu*  "g) = 11500")))
Tissue_markers <-  c(0,1,2,5,13, 8)
names(Tissue_markers) <- c( "Lungs",   "Spleen",  "Liver",   "Kidneys", "Blood", "Heart")
Experiment <- scales::hue_pal()(4)
names(Experiment) <- unique(c(Disdier_results$Experiment, Fabian_results$Experiment, Garaets_results$Experiment))
scatter_plot <- ggplot()+
geom_abline(intercept = log10(1), slope = 1, linetype = "dashed", color = "black", linewidth = 1.5,alpha = 0.7) +  # Identity line in log10 scale
geom_point(data = Disdier_results, aes(x=Observed, y=Predicted, color = Experiment, shape = Tissue), size=4, stroke = 1.5)+
geom_point(data = Fabian_results, aes(x=Observed, y=Predicted, color = Experiment, shape = Tissue), size=4, stroke = 1.5)+
geom_point(data = Garaets_results, aes(x=Observed, y=Predicted, color = Experiment, shape = Tissue), size=4, stroke = 1.5)+
scale_y_log10(limits=c(1e-03,1e+04))+
scale_x_log10(limits=c(1e-03,1e+04))+
scale_color_manual(values = Experiment,
labels = c(expression("Disdier et al. (2015), Dose = 215 " * mu* "g"),
expression("Fabian et al. (2008), Dose = 1250 " * mu* "g"),
expression("Garaets et al. (2014), Dose = 11500 " * mu* "g"),
expression("Garaets et al. (2014), Dose = 2300 " * mu* "g")
)
)+
scale_shape_manual(values = Tissue_markers)+
labs(y = expression("Predicted TiO2 (" * mu* "g/g tissue)"),
x = expression("Observed TiO2 (" * mu* "g/g tissue)"))+
theme(plot.title = element_text(hjust = 0.5),
legend.key.size = unit(1.0, 'cm'),
legend.title = element_text(size=14),
legend.text = element_text(size=14,  hjust = 0),
axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
)
print(scatter_plot)
ggsave("validation_plot.png", scatter_plot, width = 11, height = 7, units = "in", dpi = 400)
library(ggplot2)
setwd("/Users/vassilis/Documents/GitHub/PBK_Grouping/Validation/Validation_results_data")
column_names <- c('Study', 'NM Size', 'Anatase %', 'Rutile %', 'Dose',
'Injections',  'Tissue', 'Observed',   'Predicted')
# Load Results
Disdier_results <- read.csv("Disdier_results.csv", header = T)
colnames(Disdier_results) <- column_names
for (i in 1:dim(Disdier_results)[1]) {
Disdier_results[i,10] <- paste0(Disdier_results$Study[i],
", Dose (ug) = ",Disdier_results$Dose[i])
}
colnames(Disdier_results)[10] <- "Experiment"
###############################################
Fabian_results <- read.csv("Fabian_results.csv", header = T)
colnames(Fabian_results) <- column_names
for (i in 1:dim(Fabian_results)[1]) {
Fabian_results[i,10] <- paste0(Fabian_results$Study[i],
", Dose (ug) = ",Fabian_results$Dose[i])
}
colnames(Fabian_results)[10] <- "Experiment"
###############################################
Garaets_results <- read.csv("Garaets_results.csv", header = T)
colnames(Garaets_results) <- column_names
for (i in 1:dim(Garaets_results)[1]) {
Garaets_results[i,10] <- paste0(Garaets_results$Study[i],
", Dose (ug) = ",Garaets_results$Dose[i])
}
colnames(Garaets_results)[10] <- "Experiment"
# names(Experiment) <- unique(c(expression("Disdier et al. (2015), Dose (" * mu* "g) = 215"),
#                               expression("Fabian et al. (2008), Dose (" * mu* "g) = 1250"),
#                               expression("Garaets et al. (2014), Dose (" * mu*  "g) = 2300"),
#                               expression("Garaets et al. (2014), Dose (" * mu*  "g) = 11500")))
Tissue_markers <-  c(0,1,2,5,13, 8)
names(Tissue_markers) <- c( "Lungs",   "Spleen",  "Liver",   "Kidneys", "Blood", "Heart")
Experiment <- scales::hue_pal()(4)
names(Experiment) <- unique(c(Disdier_results$Experiment, Fabian_results$Experiment, Garaets_results$Experiment))
scatter_plot <- ggplot()+
geom_abline(intercept = log10(1), slope = 1, linetype = "dashed", color = "black", linewidth = 1.5,alpha = 0.7) +  # Identity line in log10 scale
geom_point(data = Disdier_results, aes(x=Observed, y=Predicted, color = Experiment, shape = Tissue), size=4, stroke = 1.5)+
geom_point(data = Fabian_results, aes(x=Observed, y=Predicted, color = Experiment, shape = Tissue), size=4, stroke = 1.5)+
geom_point(data = Garaets_results, aes(x=Observed, y=Predicted, color = Experiment, shape = Tissue), size=4, stroke = 1.5)+
scale_y_log10(limits=c(1e-03,1e+04))+
scale_x_log10(limits=c(1e-03,1e+04))+
scale_color_manual(values = Experiment,
labels = c(expression("Disdier et al. (2015), Dose = 215 " * mu* "g"),
expression("Fabian et al. (2008), Dose = 1250 " * mu* "g"),
expression("Garaets et al. (2014), Dose = 11500 " * mu* "g x 5 Doses"),
expression("Garaets et al. (2014), Dose = 2300 " * mu* "g x 1 Dose")
)
)+
scale_shape_manual(values = Tissue_markers)+
labs(y = expression("Predicted TiO2 (" * mu* "g/g tissue)"),
x = expression("Observed TiO2 (" * mu* "g/g tissue)"))+
theme(plot.title = element_text(hjust = 0.5),
legend.key.size = unit(1.0, 'cm'),
legend.title = element_text(size=14),
legend.text = element_text(size=14,  hjust = 0),
axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
)
print(scatter_plot)
ggsave("validation_plot.png", scatter_plot, width = 11, height = 7, units = "in", dpi = 400)
library(ggplot2)
setwd("/Users/vassilis/Documents/GitHub/PBK_Grouping/Validation/Validation_results_data")
column_names <- c('Study', 'NM Size', 'Anatase %', 'Rutile %', 'Dose',
'Injections',  'Tissue', 'Observed',   'Predicted')
# Load Results
Disdier_results <- read.csv("Disdier_results.csv", header = T)
colnames(Disdier_results) <- column_names
for (i in 1:dim(Disdier_results)[1]) {
Disdier_results[i,10] <- paste0(Disdier_results$Study[i],
", Dose (ug) = ",Disdier_results$Dose[i])
}
colnames(Disdier_results)[10] <- "Experiment"
###############################################
Fabian_results <- read.csv("Fabian_results.csv", header = T)
colnames(Fabian_results) <- column_names
for (i in 1:dim(Fabian_results)[1]) {
Fabian_results[i,10] <- paste0(Fabian_results$Study[i],
", Dose (ug) = ",Fabian_results$Dose[i])
}
colnames(Fabian_results)[10] <- "Experiment"
###############################################
Garaets_results <- read.csv("Garaets_results.csv", header = T)
colnames(Garaets_results) <- column_names
for (i in 1:dim(Garaets_results)[1]) {
Garaets_results[i,10] <- paste0(Garaets_results$Study[i],
", Dose (ug) = ",Garaets_results$Dose[i])
}
colnames(Garaets_results)[10] <- "Experiment"
# names(Experiment) <- unique(c(expression("Disdier et al. (2015), Dose (" * mu* "g) = 215"),
#                               expression("Fabian et al. (2008), Dose (" * mu* "g) = 1250"),
#                               expression("Garaets et al. (2014), Dose (" * mu*  "g) = 2300"),
#                               expression("Garaets et al. (2014), Dose (" * mu*  "g) = 11500")))
Tissue_markers <-  c(0,1,2,5,3, 8)
names(Tissue_markers) <- c( "Lungs",   "Spleen",  "Liver",   "Kidneys", "Blood", "Heart")
Experiment <- scales::hue_pal()(4)
names(Experiment) <- unique(c(Disdier_results$Experiment, Fabian_results$Experiment, Garaets_results$Experiment))
scatter_plot <- ggplot()+
geom_abline(intercept = log10(1), slope = 1, linetype = "dashed", color = "black", linewidth = 1.5,alpha = 0.7) +  # Identity line in log10 scale
geom_point(data = Disdier_results, aes(x=Observed, y=Predicted, color = Experiment, shape = Tissue), size=4, stroke = 1.5)+
geom_point(data = Fabian_results, aes(x=Observed, y=Predicted, color = Experiment, shape = Tissue), size=4, stroke = 1.5)+
geom_point(data = Garaets_results, aes(x=Observed, y=Predicted, color = Experiment, shape = Tissue), size=4, stroke = 1.5)+
scale_y_log10(limits=c(1e-03,1e+04))+
scale_x_log10(limits=c(1e-03,1e+04))+
scale_color_manual(values = Experiment,
labels = c(expression("Disdier et al. (2015), Dose = 215 " * mu* "g"),
expression("Fabian et al. (2008), Dose = 1250 " * mu* "g"),
expression("Garaets et al. (2014), Dose = 11500 " * mu* "g x 5 Doses"),
expression("Garaets et al. (2014), Dose = 2300 " * mu* "g x 1 Dose")
)
)+
scale_shape_manual(values = Tissue_markers)+
labs(y = expression("Predicted TiO2 (" * mu* "g/g tissue)"),
x = expression("Observed TiO2 (" * mu* "g/g tissue)"))+
theme(plot.title = element_text(hjust = 0.5),
legend.key.size = unit(1.0, 'cm'),
legend.title = element_text(size=14),
legend.text = element_text(size=14,  hjust = 0),
axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
)
print(scatter_plot)
ggsave("validation_plot.png", scatter_plot, width = 11, height = 7, units = "in", dpi = 400)
library(ggplot2)
setwd("/Users/vassilis/Documents/GitHub/PBK_Grouping/Validation/Validation_results_data")
column_names <- c('Study', 'NM Size', 'Anatase %', 'Rutile %', 'Dose',
'Injections',  'Tissue', 'Observed',   'Predicted')
# Load Results
Disdier_results <- read.csv("Disdier_results.csv", header = T)
colnames(Disdier_results) <- column_names
for (i in 1:dim(Disdier_results)[1]) {
Disdier_results[i,10] <- paste0(Disdier_results$Study[i],
", Dose (ug) = ",Disdier_results$Dose[i])
}
colnames(Disdier_results)[10] <- "Experiment"
###############################################
Fabian_results <- read.csv("Fabian_results.csv", header = T)
colnames(Fabian_results) <- column_names
for (i in 1:dim(Fabian_results)[1]) {
Fabian_results[i,10] <- paste0(Fabian_results$Study[i],
", Dose (ug) = ",Fabian_results$Dose[i])
}
colnames(Fabian_results)[10] <- "Experiment"
###############################################
Garaets_results <- read.csv("Garaets_results.csv", header = T)
colnames(Garaets_results) <- column_names
for (i in 1:dim(Garaets_results)[1]) {
Garaets_results[i,10] <- paste0(Garaets_results$Study[i],
", Dose (ug) = ",Garaets_results$Dose[i])
}
colnames(Garaets_results)[10] <- "Experiment"
# names(Experiment) <- unique(c(expression("Disdier et al. (2015), Dose (" * mu* "g) = 215"),
#                               expression("Fabian et al. (2008), Dose (" * mu* "g) = 1250"),
#                               expression("Garaets et al. (2014), Dose (" * mu*  "g) = 2300"),
#                               expression("Garaets et al. (2014), Dose (" * mu*  "g) = 11500")))
Tissue_markers <-  c(0,1,2,5,3, 8)
names(Tissue_markers) <- c( "Lungs",   "Spleen",  "Liver",   "Kidneys", "Blood", "Heart")
Experiment <- scales::hue_pal()(4)
names(Experiment) <- unique(c(Disdier_results$Experiment, Fabian_results$Experiment, Garaets_results$Experiment))
scatter_plot <- ggplot()+
geom_abline(intercept = log10(1), slope = 1, linetype = "dashed", color = "black", linewidth = 1.5,alpha = 0.7) +  # Identity line in log10 scale
geom_point(data = Disdier_results, aes(x=Observed, y=Predicted, color = Experiment, shape = Tissue), size=4, stroke = 1.5)+
geom_point(data = Fabian_results, aes(x=Observed, y=Predicted, color = Experiment, shape = Tissue), size=4, stroke = 1.5)+
geom_point(data = Garaets_results, aes(x=Observed, y=Predicted, color = Experiment, shape = Tissue), size=4, stroke = 1.5)+
scale_y_log10(limits=c(1e-03,1e+04))+
scale_x_log10(limits=c(1e-03,1e+04))+
scale_color_manual(values = Experiment,
labels = c(expression("Disdier et al. (2015), Dose = 215 " * mu* "g"),
expression("Fabian et al. (2008), Dose = 1250 " * mu* "g"),
expression("Garaets et al. (2014), Dose = 2300 " * mu* "g x 5 Doses"),
expression("Garaets et al. (2014), Dose = 2300 " * mu* "g x 1 Dose")
)
)+
scale_shape_manual(values = Tissue_markers)+
labs(y = expression("Predicted TiO2 (" * mu* "g/g tissue)"),
x = expression("Observed TiO2 (" * mu* "g/g tissue)"))+
theme(plot.title = element_text(hjust = 0.5),
legend.key.size = unit(1.0, 'cm'),
legend.title = element_text(size=14),
legend.text = element_text(size=14,  hjust = 0),
axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
)
print(scatter_plot)
ggsave("validation_plot.png", scatter_plot, width = 11, height = 7, units = "in", dpi = 400)
